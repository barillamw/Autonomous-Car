###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           15/Feb/2019  12:01:36
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        05\init.c
#    Command line  =  
#        -f C:\Users\Michael\AppData\Local\Temp\EWF9A6.tmp
#        ("C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        05\init.c" -lC "C:\Users\Michael\Documents\2019\ECE
#        306\ECE-306_code\Homework 05\Debug\List" -o
#        "C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        05\Debug\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR2355__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        05\Debug\List\init.lst
#    Object file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        05\Debug\Obj\init.r43
#
###############################################################################

C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework 05\init.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the functions to initiate the MSP430.
      4          //  
      5          //
      6          //  Michael Barilla
      7          //  Jan 2018
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //------------------------------------------------------------------------------
     10          
     11          #include  "functions.h"
     12          #include  "msp430.h"
     13          #include <string.h>
     14          #include "macros.h"
     15          
     16          //Global Variables
     17          extern char display_line[4][11];
     18          extern char *display[4];
     19          extern volatile unsigned char display_changed;
     20          extern volatile unsigned char update_display;
     21          extern volatile unsigned int update_display_count;
     22          extern unsigned char event;
     23          extern unsigned char state;
     24          extern unsigned char shape;
     25          extern unsigned int myTime;
     26          extern unsigned int count;
     27          extern unsigned int p3use;
     28          

   \                                 In  segment CODE, align 2
     29          void Init_Conditions(void){
   \                     Init_Conditions:
   \   000000   0A12         PUSH.W  R10
     30          //------------------------------------------------------------------------------
     31            int i;
     32          
     33            for(i=0;i<11;i++){
   \   000002   0A43         MOV.W   #0x0, R10
   \                     ??Init_Conditions_0:
   \   000004   3A900B00     CMP.W   #0xb, R10
   \   000008   0A34         JGE     ??Init_Conditions_1
     34              display_line[0][i] = RESET_STATE;
   \   00000A   CA43....     MOV.B   #0x0, display_line(R10)
     35              display_line[1][i] = RESET_STATE;
   \   00000E   CA43....     MOV.B   #0x0, display_line + 11(R10)
     36              display_line[2][i] = RESET_STATE;
   \   000012   CA43....     MOV.B   #0x0, display_line + 22(R10)
     37              display_line[3][i] = RESET_STATE;
   \   000016   CA43....     MOV.B   #0x0, display_line + 33(R10)
     38            }
   \   00001A   1A53         ADD.W   #0x1, R10
   \   00001C   F33F         JMP     ??Init_Conditions_0
     39            display_line[0][10] = 0;
   \                     ??Init_Conditions_1:
   \   00001E   C243....     MOV.B   #0x0, &display_line + 10
     40            display_line[1][10] = 0;
   \   000022   C243....     MOV.B   #0x0, &display_line + 21
     41            display_line[2][10] = 0;
   \   000026   C243....     MOV.B   #0x0, &display_line + 32
     42            display_line[3][10] = 0;
   \   00002A   C243....     MOV.B   #0x0, &display_line + 43
     43          
     44            display[0] = &display_line[0][0];
   \   00002E   B240........ MOV.W   #display_line, &display
     45            display[1] = &display_line[1][0];
   \   000034   B240........ MOV.W   #display_line + 11, &display + 2
     46            display[2] = &display_line[2][0];
   \   00003A   B240........ MOV.W   #display_line + 22, &display + 4
     47            display[3] = &display_line[3][0];
   \   000040   B240........ MOV.W   #display_line + 33, &display + 6
     48            update_display = 0;
   \   000046   C243....     MOV.B   #0x0, &update_display
     49            update_display_count = 0;
   \   00004A   8243....     MOV.W   #0x0, &update_display_count
     50          // Interrupts are disabled by default, enable them.
     51            enable_interrupts();
   \   00004E   ........     CALLA   #enable_interrupts
     52          //------------------------------------------------------------------------------
     53          
     54          //State Machine Variables
     55            event = NONE;
   \   000052   F2404E00.... MOV.B   #0x4e, &event
     56            shape = STRAIGHT;
   \   000058   F2404C00.... MOV.B   #0x4c, &shape
     57            state = WAIT;
   \   00005E   F2405700.... MOV.B   #0x57, &state
     58            myTime = 0;
   \   000064   8243....     MOV.W   #0x0, &myTime
     59            count = 0;
   \   000068   8243....     MOV.W   #0x0, &count
     60            
     61          //port initialization
     62            p3use = USE_GPIO;
   \   00006C   8243....     MOV.W   #0x0, &p3use
     63          }
   \   000070   3A41         POP.W   R10
   \   000072   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   Init_Conditions
        6   -> enable_interrupts


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     116  Init_Conditions

 
 116 bytes in segment CODE
 
 116 bytes of CODE memory

Errors: none
Warnings: none
