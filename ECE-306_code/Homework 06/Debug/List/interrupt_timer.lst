###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           22/Feb/2019  10:29:42
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        06\interrupt_timer.c
#    Command line  =  
#        -f C:\Users\Michael\AppData\Local\Temp\EWB52C.tmp
#        ("C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        06\interrupt_timer.c" -lC "C:\Users\Michael\Documents\2019\ECE
#        306\ECE-306_code\Homework 06\Debug\List" -o
#        "C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        06\Debug\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR2355__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        06\Debug\List\interrupt_timer.lst
#    Object file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        06\Debug\Obj\interrupt_timer.r43
#
###############################################################################

C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework 06\interrupt_timer.c
      1          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x21a
   \   union <unnamed> _A_PAIE_L
   \                     _A_PAIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x21c
   \   union <unnamed> _A_PAIFG_L
   \                     _A_PAIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23c
   \   union <unnamed> _A_PBIFG_L
   \                     _A_PBIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x384
   \   union <unnamed> _A_TB0CCTL1_L
   \                     _A_TB0CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x394
   \   union <unnamed> _A_TB0CCR1_L
   \                     _A_TB0CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3ae
   \   union <unnamed> _A_TB0IV_L
   \                     _A_TB0IV_L:
   \   000000                DS8 2
      2          #include  "macros.h"
      3          
      4          
      5          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      6          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      7          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      8          unsigned int blink_count;
   \                     blink_count:
   \   000000                DS8 2
      9          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     10          volatile unsigned int debounce1;
   \                     debounce1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          volatile unsigned int debounce1_count;
   \                     debounce1_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     12          volatile unsigned int debounce2;
   \                     debounce2:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     13          volatile unsigned int debounce2_count;
   \                     debounce2_count:
   \   000000                DS8 2
     14          
     15          extern volatile unsigned char update_display;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          unsigned int update_count;
   \                     update_count:
   \   000000                DS8 2
     17          
     18          
     19          #pragma vector = TIMER0_B0_VECTOR // Timer B0 – 0 Capture compare

   \                                 In  segment ISR_CODE, align 2
     20          __interrupt void Timer0_B0_ISR(void){
   \                     Timer0_B0_ISR:
   \   000000   1F15         PUSHM.W #0x2, R15
     21          //--------------------------------------------------------------------
     22          // TimerB0 0 Interrupt handler
     23          //--------------------------------------------------------------------
     24            // LCD Backlight
     25            if(blink_count++ > COUNT_TEN){
   \   000002   1F42....     MOV.W   &blink_count, R15
   \   000006   0E4F         MOV.W   R15, R14
   \   000008   1E53         ADD.W   #0x1, R14
   \   00000A   824E....     MOV.W   R14, &blink_count
   \   00000E   3F900B00     CMP.W   #0xb, R15
   \   000012   0528         JNC     ??Timer0_B0_ISR_0
     26              blink_count = RESET_STATE; // Reset for next count
   \   000014   8243....     MOV.W   #0x0, &blink_count
     27              P6OUT ^= LCD_BACKLITE; // Flip State of LCD_BACKLITE
   \   000018   F2E010004302 XOR.B   #0x10, &0x243
     28            }
     29            
     30            if(update_count++ >COUNT_FOURTY){
   \                     ??Timer0_B0_ISR_0:
   \   00001E   1F42....     MOV.W   &update_count, R15
   \   000022   0E4F         MOV.W   R15, R14
   \   000024   1E53         ADD.W   #0x1, R14
   \   000026   824E....     MOV.W   R14, &update_count
   \   00002A   3F902900     CMP.W   #0x29, R15
   \   00002E   0228         JNC     ??Timer0_B0_ISR_1
     31                  update_display = HIGH;
   \   000030   D243....     MOV.B   #0x1, &update_display
     32            }
     33              
     34            // Time Sequence
     35            one_time = HIGH;
   \                     ??Timer0_B0_ISR_1:
   \   000034   D243....     MOV.B   #0x1, &one_time
     36            if(Time_Sequence++ > 250){
   \   000038   1F42....     MOV.W   &Time_Sequence, R15
   \   00003C   0E4F         MOV.W   R15, R14
   \   00003E   1E53         ADD.W   #0x1, R14
   \   000040   824E....     MOV.W   R14, &Time_Sequence
   \   000044   3F90FB00     CMP.W   #0xfb, R15
   \   000048   0228         JNC     ??Timer0_B0_ISR_2
     37              Time_Sequence = RESET_STATE;
   \   00004A   8243....     MOV.W   #0x0, &Time_Sequence
     38            }
     39            
     40           
     41            
     42            //CHANGE_PROBE;
     43            TB0CCR0 += TB0CCR0_INTERVAL; // Add interval Offset to TBCCR0
   \                     ??Timer0_B0_ISR_2:
   \   00004E   B250A8619203 ADD.W   #0x61a8, &0x392
     44          //--------------------------------------------------------------------
     45          }
   \   000054   1E17         POPM.W  #0x2, R15
   \   000056   0013         RETI
   \   000058                REQUIRE _A_PCOUT_L
   \   000058                REQUIRE _A_TB0CCR0_L
     46          
     47          #pragma vector = TIMER0_B1_VECTOR // Timer B0 – 1 Capture compare

   \                                 In  segment ISR_CODE, align 2
     48          __interrupt void Timer0_B1_ISR(void){
   \                     Timer0_B1_ISR:
   \   000000   1F15         PUSHM.W #0x2, R15
     49          //--------------------------------------------------------------------
     50          // TimerB0 1 Interrupt handler
     51          //--------------------------------------------------------------------
     52            switch(__even_in_range(TB0IV,14)){
   \   000002   1F42AE03     MOV.W   &0x3ae, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for Timer0_B1_ISR>_0`:
   \   000008   3A3C         JMP     ??Timer0_B1_ISR_1
   \   00000A   063C         JMP     ??Timer0_B1_ISR_4
   \   00000C   383C         JMP     ??Timer0_B1_ISR_1
   \   00000E   373C         JMP     ??Timer0_B1_ISR_1
   \   000010   363C         JMP     ??Timer0_B1_ISR_1
   \   000012   353C         JMP     ??Timer0_B1_ISR_1
   \   000014   343C         JMP     ??Timer0_B1_ISR_1
   \   000016   333C         JMP     ??Timer0_B1_ISR_1
     53            case 0: break;                //No Interrupt
     54            case 2:                       //CCR1 
     55              if (debounce1){
   \                     ??Timer0_B1_ISR_4:
   \   000018   8293....     CMP.W   #0x0, &debounce1
   \   00001C   1424         JEQ     ??Timer0_B1_ISR_2
     56                if(debounce1_count++ > COUNT_TEN){
   \   00001E   1F42....     MOV.W   &debounce1_count, R15
   \   000022   0E4F         MOV.W   R15, R14
   \   000024   1E53         ADD.W   #0x1, R14
   \   000026   824E....     MOV.W   R14, &debounce1_count
   \   00002A   3F900B00     CMP.W   #0xb, R15
   \   00002E   0B28         JNC     ??Timer0_B1_ISR_2
     57                  debounce1 = LOW;
   \   000030   8243....     MOV.W   #0x0, &debounce1
     58                  debounce1_count = LOW;
   \   000034   8243....     MOV.W   #0x0, &debounce1_count
     59                  P4IFG &= ~SW1;                //Clear all Sw1 inerrupt flags
   \   000038   E2C33D02     BIC.B   #0x2, &0x23d
     60                  P4IE |= SW1;                  //Sw1 interrupt enabled
   \   00003C   E2D33B02     BIS.B   #0x2, &0x23b
     61                  TB0CCTL1 &= ~CCIE;            // CCR1 disable interrupt
   \   000040   B2C010008403 BIC.W   #0x10, &0x384
     62                }
     63              }
     64              if(debounce2){
   \                     ??Timer0_B1_ISR_2:
   \   000046   8293....     CMP.W   #0x0, &debounce2
   \   00004A   1424         JEQ     ??Timer0_B1_ISR_3
     65                if(debounce2_count++ > COUNT_TEN){
   \   00004C   1F42....     MOV.W   &debounce2_count, R15
   \   000050   0E4F         MOV.W   R15, R14
   \   000052   1E53         ADD.W   #0x1, R14
   \   000054   824E....     MOV.W   R14, &debounce2_count
   \   000058   3F900B00     CMP.W   #0xb, R15
   \   00005C   0B28         JNC     ??Timer0_B1_ISR_3
     66                  debounce2 = LOW;
   \   00005E   8243....     MOV.W   #0x0, &debounce2
     67                  debounce2_count = LOW;
   \   000062   8243....     MOV.W   #0x0, &debounce2_count
     68                  P2IFG &= ~SW2;                //Clear all Sw1 inerrupt flags
   \   000066   F2C21D02     BIC.B   #0x8, &0x21d
     69                  P2IE |= SW2;                  //Sw1 interrupt enabled
   \   00006A   F2D21B02     BIS.B   #0x8, &0x21b
     70                  TB0CCTL1 &= ~CCIE;            // CCR1 disable interrupt
   \   00006E   B2C010008403 BIC.W   #0x10, &0x384
     71                }
     72              }
     73              TB0CCTL1 &= ~CCIFG; // CCR1 clear interrupt flag
   \                     ??Timer0_B1_ISR_3:
   \   000074   92C38403     BIC.W   #0x1, &0x384
     74              TB0CCR1 += TB0CCR1_INTERVAL; // Add interval Offset to TBCCR1
   \   000078   B250409C9403 ADD.W   #0x9c40, &0x394
     75              break;
     76            case 4: break;
     77            case 14: break;
     78            default: break;
     79            }
     80          //--------------------------------------------------------------------
     81          }
   \                     ??Timer0_B1_ISR_1:
   \   00007E   1E17         POPM.W  #0x2, R15
   \   000080   0013         RETI
   \   000082                REQUIRE _A_PBIFG_L
   \   000082                REQUIRE _A_PBIE_L
   \   000082                REQUIRE _A_TB0CCTL1_L
   \   000082                REQUIRE _A_PAIFG_L
   \   000082                REQUIRE _A_PAIE_L
   \   000082                REQUIRE _A_TB0CCR1_L
   \   000082                REQUIRE _A_TB0IV_L

   \                                 In  segment INTVEC, offset 0x54, root
   \                     `??Timer0_B1_ISR::??INTVEC 84`:
   \   000054   ....         DC16    Timer0_B1_ISR

   \                                 In  segment INTVEC, offset 0x56, root
   \                     `??Timer0_B0_ISR::??INTVEC 86`:
   \   000056   ....         DC16    Timer0_B0_ISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      8   Timer0_B0_ISR
      8   Timer0_B1_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  Time_Sequence
      88  Timer0_B0_ISR
       2  Timer0_B0_ISR::??INTVEC 86
     130  Timer0_B1_ISR
       2  Timer0_B1_ISR::??INTVEC 84
       2  _A_PAIE_L
       2  _A_PAIFG_L
       2  _A_PBIE_L
       2  _A_PBIFG_L
       2  _A_PCOUT_L
       2  _A_TB0CCR0_L
       2  _A_TB0CCR1_L
       2  _A_TB0CCTL1_L
       2  _A_TB0IV_L
       2  blink_count
       2  debounce1
       2  debounce1_count
       2  debounce2
       2  debounce2_count
       1  one_time
       2  update_count

 
  18 bytes in segment DATA16_AN
  15 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
 218 bytes in segment ISR_CODE
 
 218 bytes of CODE  memory
   0 bytes of CONST memory (+  4 bytes shared)
  15 bytes of DATA  memory (+ 18 bytes shared)

Errors: none
Warnings: none
