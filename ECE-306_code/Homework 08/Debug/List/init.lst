###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           25/Mar/2019  17:49:18
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project 07 -
#        OLD\init.c
#    Command line  =  
#        -f C:\Users\Michael\AppData\Local\Temp\EWF96F.tmp
#        ("C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project 07 -
#        OLD\init.c" -lC "C:\Users\Michael\Documents\2019\ECE
#        306\ECE-306_code\Project 07 - OLD\Debug\List" -o
#        "C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project 07 -
#        OLD\Debug\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR2355__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project 07 -
#        OLD\Debug\List\init.lst
#    Object file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project 07 -
#        OLD\Debug\Obj\init.r43
#
###############################################################################

C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project 07 - OLD\init.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the functions to initiate the MSP430.
      4          //  
      5          //
      6          //  Michael Barilla
      7          //  Jan 2019
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //------------------------------------------------------------------------------
     10          
     11          #include  "functions.h"
     12          #include  "msp430.h"
     13          #include <string.h>
     14          #include "macros.h"
     15          
     16          //Global Variables
     17          extern char display_line[FOURTH][COUNT_ELEVEN];
     18          extern char *display[FOURTH];
     19          extern volatile unsigned char display_changed;
     20          extern volatile unsigned char update_display;
     21          extern volatile unsigned int update_display_count;
     22          
     23          
     24          

   \                                 In  segment CODE, align 2
     25          void Init_Conditions(void){
   \                     Init_Conditions:
   \   000000   0A12         PUSH.W  R10
     26          //------------------------------------------------------------------------------
     27            int i;
     28          
     29            for(i=LOW;i<COUNT_ELEVEN;i++){
   \   000002   0A43         MOV.W   #0x0, R10
   \                     ??Init_Conditions_0:
   \   000004   3A900B00     CMP.W   #0xb, R10
   \   000008   0A34         JGE     ??Init_Conditions_1
     30              display_line[FIRST_LINE][i] = RESET_STATE;
   \   00000A   CA43....     MOV.B   #0x0, display_line(R10)
     31              display_line[SECOND_LINE][i] = RESET_STATE;
   \   00000E   CA43....     MOV.B   #0x0, display_line + 11(R10)
     32              display_line[THIRD_LINE][i] = RESET_STATE;
   \   000012   CA43....     MOV.B   #0x0, display_line + 22(R10)
     33              display_line[FOURTH_LINE][i] = RESET_STATE;
   \   000016   CA43....     MOV.B   #0x0, display_line + 33(R10)
     34            }
   \   00001A   1A53         ADD.W   #0x1, R10
   \   00001C   F33F         JMP     ??Init_Conditions_0
     35            display_line[FIRST_LINE][COUNT_TEN] = RESET_STATE;
   \                     ??Init_Conditions_1:
   \   00001E   C243....     MOV.B   #0x0, &display_line + 10
     36            display_line[SECOND_LINE][COUNT_TEN] = RESET_STATE;
   \   000022   C243....     MOV.B   #0x0, &display_line + 21
     37            display_line[THIRD_LINE][COUNT_TEN] = RESET_STATE;
   \   000026   C243....     MOV.B   #0x0, &display_line + 32
     38            display_line[FOURTH_LINE][COUNT_TEN] = RESET_STATE;
   \   00002A   C243....     MOV.B   #0x0, &display_line + 43
     39          
     40            display[FIRST_LINE] = &display_line[FIRST_LINE][LOW];
   \   00002E   B240........ MOV.W   #display_line, &display
     41            display[SECOND_LINE] = &display_line[SECOND_LINE][LOW];
   \   000034   B240........ MOV.W   #display_line + 11, &display + 2
     42            display[THIRD_LINE] = &display_line[THIRD_LINE][LOW];
   \   00003A   B240........ MOV.W   #display_line + 22, &display + 4
     43            display[FOURTH_LINE] = &display_line[FOURTH_LINE][LOW];
   \   000040   B240........ MOV.W   #display_line + 33, &display + 6
     44            update_display = LOW;
   \   000046   C243....     MOV.B   #0x0, &update_display
     45            update_display_count = LOW;
   \   00004A   8243....     MOV.W   #0x0, &update_display_count
     46          // Interrupts are disabled by default, enable them.
     47            enable_interrupts();
   \   00004E   ........     CALLA   #enable_interrupts
     48          //------------------------------------------------------------------------------
     49          
     50          }
   \   000052   3A41         POP.W   R10
   \   000054   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   Init_Conditions
        6   -> enable_interrupts


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      86  Init_Conditions

 
 86 bytes in segment CODE
 
 86 bytes of CODE memory

Errors: none
Warnings: none
