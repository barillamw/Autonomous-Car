###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           31/Mar/2019  11:39:46
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        08\interrupt_serial.c
#    Command line  =  
#        -f C:\Users\Michael\AppData\Local\Temp\EWA160.tmp
#        ("C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        08\interrupt_serial.c" -lC "C:\Users\Michael\Documents\2019\ECE
#        306\ECE-306_code\Homework 08\Debug\List" -o
#        "C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        08\Debug\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR2355__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        08\Debug\List\interrupt_serial.lst
#    Object file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        08\Debug\Obj\interrupt_serial.r43
#
###############################################################################

C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework 08\interrupt_serial.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the functions to initiate the Serial 
      4          //      port for USB at various Baud Rates
      5          //      A0 - 115,200
      6          //      A1 - 460,800
      7          //  
      8          //
      9          //  Michael Barilla
     10          //  Jan 2019
     11          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
     12          //------------------------------------------------------------------------------
     13          
     14          #include  "functions.h"
     15          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x58c
   \   union <unnamed> _A_UCA1RXBUF_L
   \                     _A_UCA1RXBUF_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x59e
   \   union <unnamed> _A_UCA1IV_L
   \                     _A_UCA1IV_L:
   \   000000                DS8 2
     16          #include "macros.h"
     17          
     18          //Global Varibles
     19          extern volatile unsigned int usb_rx_ring_wr;
     20          extern volatile unsigned int usb_rx_ring_rd;
     21          extern volatile char USB_Char_Rx[SMALL_RING_SIZE];
     22          extern volatile char USB_Char_Tx[SMALL_RING_SIZE];
     23          extern volatile unsigned int iot_rx_ring_wr;
     24          extern volatile char IOT_Char_Rx[SMALL_RING_SIZE];
     25          extern volatile char IOT_Char_Tx[SMALL_RING_SIZE];

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          unsigned int UCA1_index;
   \                     UCA1_index:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          unsigned int UCA0_index;
   \                     UCA0_index:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     28          unsigned int lineFinished;
   \                     lineFinished:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          unsigned int lineStart;
   \                     lineStart:
   \   000000                DS8 2
     30          
     31          //------------------------------------------------------------------------------
     32          
     33          /*#pragma vector = EUSCI_A0_VECTOR
     34          __interrupt void eUSCI_A0_ISR(void){
     35            unsigned int temp;
     36            switch(__even_in_range(UCA0IV,0x08)){
     37            case 0:                       //vector 0 - no interrupt
     38              break;
     39            case 2:                       //Vector 2 - RXIFG
     40              temp = iot_rx_ring_wr++;
     41              IOT_Char_Rx[temp] = UCA0RXBUF;      //RX -> IOT_Char_Rx character
     42              UCA0RXBUF = IOT_Char_Rx[temp];
     43              if (iot_rx_ring_wr >= (sizeof(USB_Char_Rx))){
     44                usb_rx_ring_wr = BEGINNING;
     45              }
     46              break;
     47            case 4:
     48              switch(UCA0_index++){
     49              case 0:
     50              case 1:
     51              case 2:
     52              case 3:
     53              case 4:
     54              case 5:
     55              case 6:
     56              case 7:
     57              case 8:
     58                UCA0TXBUF = IOT_Char_Tx[UCA0_index];
     59                break;
     60              case 9:
     61                UCA0TXBUF = 0x0D;
     62                break;
     63              case 10:
     64                UCA0TXBUF = 0x0A;
     65                break;
     66              default:
     67                UCA0IE &= ~UCTXIE;                //disable TX interrupt
     68                break;
     69              }
     70              break;
     71            }
     72          }*/
     73          
     74          #pragma vector = EUSCI_A1_VECTOR

   \                                 In  segment ISR_CODE, align 2
     75          __interrupt void eUSCI_A1_ISR(void){
   \                     eUSCI_A1_ISR:
   \   000000   2F15         PUSHM.W #0x3, R15
     76          unsigned int temp;
     77            
     78            switch(__even_in_range(UCA1IV, 0x08)){
   \   000002   1E429E05     MOV.W   &0x59e, R14
   \   000006   E00E         ADDA    R14, PC
   \                     `?<Jumptable for eUSCI_A1_ISR>_0`:
   \   000008   263C         JMP     ??eUSCI_A1_ISR_3
   \   00000A   033C         JMP     ??eUSCI_A1_ISR_4
   \   00000C   243C         JMP     ??eUSCI_A1_ISR_3
   \   00000E   233C         JMP     ??eUSCI_A1_ISR_3
   \   000010   223C         JMP     ??eUSCI_A1_ISR_3
     79              case 0:
     80                break;
     81              case 2:
     82                temp = usb_rx_ring_wr++;
   \                     ??eUSCI_A1_ISR_4:
   \   000012   1E42....     MOV.W   &usb_rx_ring_wr, R14
   \   000016   0D4E         MOV.W   R14, R13
   \   000018   1D53         ADD.W   #0x1, R13
   \   00001A   824D....     MOV.W   R13, &usb_rx_ring_wr
   \   00001E   0F4E         MOV.W   R14, R15
     83                USB_Char_Rx[temp] = UCA1RXBUF;        //RX -> USB_Char_Rx character
   \   000020   1E428C05     MOV.W   &0x58c, R14
   \   000024   CF4E....     MOV.B   R14, USB_Char_Rx(R15)
     84                if(USB_Char_Rx[temp] != '\0') lineStart = HIGH;
   \   000028   CF93....     CMP.B   #0x0, USB_Char_Rx(R15)
   \   00002C   0224         JEQ     ??eUSCI_A1_ISR_1
   \   00002E   9243....     MOV.W   #0x1, &lineStart
     85                if(USB_Char_Rx[temp] == '\0' && lineStart == HIGH){
   \                     ??eUSCI_A1_ISR_1:
   \   000032   CF93....     CMP.B   #0x0, USB_Char_Rx(R15)
   \   000036   0920         JNE     ??eUSCI_A1_ISR_2
   \   000038   9293....     CMP.W   #0x1, &lineStart
   \   00003C   0620         JNE     ??eUSCI_A1_ISR_2
     86                  lineStart = LOW;
   \   00003E   8243....     MOV.W   #0x0, &lineStart
     87                  lineFinished = HIGH;
   \   000042   9243....     MOV.W   #0x1, &lineFinished
     88                  usb_rx_ring_wr = BEGINNING;
   \   000046   8243....     MOV.W   #0x0, &usb_rx_ring_wr
     89                }
     90                if (usb_rx_ring_wr >= (sizeof(USB_Char_Rx))){
   \                     ??eUSCI_A1_ISR_2:
   \   00004A   B2901000.... CMP.W   #0x10, &usb_rx_ring_wr
   \   000050   0228         JNC     ??eUSCI_A1_ISR_3
     91                  usb_rx_ring_wr = BEGINNING;
   \   000052   8243....     MOV.W   #0x0, &usb_rx_ring_wr
     92          
     93                }
     94                break;
     95              case 4:
     96                /*switch(UCA1_index++){
     97                  case 0:
     98                  case 1:
     99                  case 2:
    100                  case 3:
    101                  case 4:
    102                  case 5:
    103                  case 6:
    104                  case 7:
    105                  case 8:
    106                    UCA1TXBUF = USB_Char_Tx[UCA1_index];
    107                    break;
    108                  case 9:
    109                    //UCA1TXBUF = 0x0D;
    110                    break;
    111                  case 10:
    112                    //UCA1TXBUF = 0x0A;
    113                    break;
    114                  default:
    115                    //UCA1IE &= ~UCTXIE;
    116                    UCA1IFG &= ~UCTXIFG;
    117                    break;
    118                }
    119                break;*/
    120              default: break;
    121            }
    122          }
   \                     ??eUSCI_A1_ISR_3:
   \   000056   2D17         POPM.W  #0x3, R15
   \   000058   0013         RETI
   \   00005A                REQUIRE _A_UCA1RXBUF_L
   \   00005A                REQUIRE _A_UCA1IV_L

   \                                 In  segment INTVEC, offset 0x40, root
   \                     `??eUSCI_A1_ISR::??INTVEC 64`:
   \   000040   ....         DC16    eUSCI_A1_ISR
    123            
    124                

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     10   eUSCI_A1_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  UCA0_index
       2  UCA1_index
       2  _A_UCA1IV_L
       2  _A_UCA1RXBUF_L
      90  eUSCI_A1_ISR
       2  eUSCI_A1_ISR::??INTVEC 64
       2  lineFinished
       2  lineStart

 
  4 bytes in segment DATA16_AN
  8 bytes in segment DATA16_Z
  2 bytes in segment INTVEC
 90 bytes in segment ISR_CODE
 
 90 bytes of CODE  memory
  0 bytes of CONST memory (+ 2 bytes shared)
  8 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
