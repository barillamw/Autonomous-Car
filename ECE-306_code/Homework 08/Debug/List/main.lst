###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           31/Mar/2019  17:16:04
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        08\main.c
#    Command line  =  
#        -f C:\Users\Michael\AppData\Local\Temp\EW7EA6.tmp
#        ("C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        08\main.c" -lC "C:\Users\Michael\Documents\2019\ECE
#        306\ECE-306_code\Homework 08\Debug\List" -o
#        "C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        08\Debug\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR2355__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        08\Debug\List\main.lst
#    Object file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        08\Debug\Obj\main.r43
#
###############################################################################

C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework 08\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2018
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //------------------------------------------------------------------------------
     10          
     11          #include  "functions.h"
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x386
   \   union <unnamed> _A_TB0CCTL2_L
   \                     _A_TB0CCTL2_L:
   \   000000                DS8 2
     13          #include <string.h>
     14          #include "macros.h"
     15          
     16            // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     18          extern char display_line[FOURTH][COUNT_ELEVEN];
     19          extern char *display[FOURTH];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     21          extern volatile unsigned char display_changed;
     22          extern volatile unsigned char update_display;
     23          extern volatile unsigned int update_display_count;
     24          extern volatile unsigned int Time_Sequence;
     25          extern volatile char one_time;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     28          char change;
   \                     change:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          unsigned int Last_Time_Sequence;
   \                     Last_Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          unsigned int cycle_time;
   \                     cycle_time:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     31          unsigned int time_change;
   \                     time_change:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          unsigned int time_change2;
   \                     time_change2:
   \   000000                DS8 2
     33          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          unsigned int switchONE;
   \                     switchONE:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          unsigned int switchTWO;
   \                     switchTWO:
   \   000000                DS8 2
     36          extern unsigned int loFreq;
     37          extern unsigned int hiFreq;
     38          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     39          unsigned int capture;
   \                     capture:
   \   000000                DS8 2
     40          extern volatile unsigned int newSecond;
     41          extern char state;
     42          extern unsigned int time_count_en;
     43          extern unsigned int runDrive;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     44          unsigned int testTurn;
   \                     testTurn:
   \   000000                DS8 2
     45          
     46          extern unsigned int waitTime;
     47          extern unsigned int endWait;
     48          
     49          extern unsigned int lineFinished;
     50          extern unsigned int lineStart;
     51          
     52          
     53          
     54          
     55          

   \                                 In  segment CODE, align 2
     56          void main(void){
   \                     main:
     57          //------------------------------------------------------------------------------
     58          // Main Program
     59          // This is the main routine for the program. Execution of code starts here.
     60          // The operating system is Back Ground Fore Ground.
     61          //
     62          //------------------------------------------------------------------------------
     63          // Disable the GPIO power-on default high-impedance mode to activate
     64          // previously configured port settings
     65            
     66            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     67            
     68            Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     69            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     70            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     71            Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     72            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     73            //Init_ADC();
     74          // Place the contents of what you want on the display, in between the quotes
     75          // Limited to 10 characters per line
     76          //
     77          
     78            strcpy(display_line[FIRST_LINE], "          ");
   \   000018   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00001C   3C40....     MOV.W   #display_line, R12
   \   000020   ........     CALLA   #strcpy
     79            //update_string(display_line[FIRST_LINE], FIRST_LINE);
     80            strcpy(display_line[SECOND_LINE], "          ");
   \   000024   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000028   3C40....     MOV.W   #display_line + 11, R12
   \   00002C   ........     CALLA   #strcpy
     81            //update_string(display_line[SECOND_LINE], SECOND_LINE);
     82            strcpy(display_line[THIRD_LINE], "          ");
   \   000030   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000034   3C40....     MOV.W   #display_line + 22, R12
   \   000038   ........     CALLA   #strcpy
     83            strcpy(display_line[FOURTH_LINE], "          ");
   \   00003C   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000040   3C40....     MOV.W   #display_line + 33, R12
   \   000044   ........     CALLA   #strcpy
     84            display_changed = HIGH;
   \   000048   D243....     MOV.B   #0x1, &display_changed
     85            //update_string(display_line[FOURTH_LINE], FOURTH_LINE);
     86            
     87              Display_Update(FOURTH_LINE,SECOND_LINE,FIRST_LINE,FIRST_LINE);
   \   00004C   4F43         MOV.B   #0x0, R15
   \   00004E   4E43         MOV.B   #0x0, R14
   \   000050   5D43         MOV.B   #0x1, R13
   \   000052   7C400300     MOV.B   #0x3, R12
   \   000056   ........     CALLA   #Display_Update
     88          //------------------------------------------------------------------------------
     89          // Begining of the "While" Operating System
     90          //------------------------------------------------------------------------------
     91            while(ALWAYS) {                      // Can the Operating system run
     92              
     93              if(switchONE){
   \                     ??main_0:
   \   00005A   8293....     CMP.W   #0x0, &switchONE
   \   00005E   0824         JEQ     ??main_1
     94                  switchONE = LOW;
   \   000060   8243....     MOV.W   #0x0, &switchONE
     95                  //strcpy(display_line[THIRD_LINE], " SWITCH 1  ");
     96                  display_changed = HIGH;
   \   000064   D243....     MOV.B   #0x1, &display_changed
     97                  capture = HIGH;
   \   000068   9243....     MOV.W   #0x1, &capture
     98                  Init_Serial();
   \   00006C   ........     CALLA   #Init_Serial
     99                  
    100              }
    101              if(switchTWO){
   \                     ??main_1:
   \   000070   8293....     CMP.W   #0x0, &switchTWO
   \   000074   0824         JEQ     ??main_2
    102                  switchTWO = LOW;
   \   000076   8243....     MOV.W   #0x0, &switchTWO
    103                  //strcpy(display_line[THIRD_LINE], " SWITCH 2  ");
    104                  display_changed = HIGH;
   \   00007A   D243....     MOV.B   #0x1, &display_changed
    105                  //P5OUT &= ~IR_LED;
    106                  //Begin_ADC();
    107                  testTurn = HIGH;
   \   00007E   9243....     MOV.W   #0x1, &testTurn
    108                  Init_Serial();
   \   000082   ........     CALLA   #Init_Serial
    109          
    110          
    111                  
    112              }
    113              Transmit_NCSU_A1();
   \                     ??main_2:
   \   000086   ........     CALLA   #Transmit_NCSU_A1
    114              
    115                
    116              if(lineFinished){
   \   00008A   8293....     CMP.W   #0x0, &lineFinished
   \   00008E   0424         JEQ     ??main_3
    117                Recieved_Text();
   \   000090   ........     CALLA   #Recieved_Text
    118                lineFinished = LOW;
   \   000094   8243....     MOV.W   #0x0, &lineFinished
    119              }
    120              
    121              
    122                
    123              //UCA0TXBUF = 'U';
    124              /*displayADC();
    125              followCircle();*/
    126              display_changed = HIGH;
   \                     ??main_3:
   \   000098   D243....     MOV.B   #0x1, &display_changed
    127              Display_Process();
   \   00009C   ........     CALLA   #Display_Process
   \   0000A0   DC3F         JMP     ??main_0
   \   0000A2   0343         NOP
   \   0000A4                REQUIRE _A_PM5CTL0_L
    128            }
    129          //------------------------------------------------------------------------------
    130          }
    131          

   \                                 In  segment CODE, align 2
    132          void blackLine(void){
   \                     blackLine:
    133                switch(state){
   \   000000   5E42....     MOV.B   &state, R14
   \   000004   7E806300     SUB.B   #0x63, R14
   \   000008   0D24         JEQ     ??blackLine_4
   \   00000A   5E83         SUB.B   #0x1, R14
   \   00000C   2E24         JEQ     ??blackLine_5
   \   00000E   7E800500     SUB.B   #0x5, R14
   \   000012   1224         JEQ     ??blackLine_6
   \   000014   7E800A00     SUB.B   #0xa, R14
   \   000018   4324         JEQ     ??blackLine_7
   \   00001A   5E83         SUB.B   #0x1, R14
   \   00001C   1724         JEQ     ??blackLine_8
   \   00001E   5E83         SUB.B   #0x1, R14
   \   000020   3024         JEQ     ??blackLine_9
   \   000022   1001         RETA
    134              case CALIBRATE:
    135                strcpy(display_line[SECOND_LINE],"CALIBRATE ");
   \                     ??blackLine_4:
   \   000024   3D40....     MOV.W   #`?<Constant "CALIBRATE ">`, R13
   \   000028   3C40....     MOV.W   #display_line + 11, R12
   \   00002C   ........     CALLA   #strcpy
    136                display_changed = HIGH;
   \   000030   D243....     MOV.B   #0x1, &display_changed
    137                calibrate();
   \   000034   ........     BRA     #calibrate
    138                break;
    139              case INTERCEPT:
    140                strcpy(display_line[SECOND_LINE],"INTERCEPT ");
   \                     ??blackLine_6:
   \   000038   3D40....     MOV.W   #`?<Constant "INTERCEPT ">`, R13
   \   00003C   3C40....     MOV.W   #display_line + 11, R12
   \   000040   ........     CALLA   #strcpy
    141                display_changed = HIGH;
   \   000044   D243....     MOV.B   #0x1, &display_changed
    142                intercept();
   \   000048   ........     BRA     #intercept
    143                break;
    144              case TURN: 
    145                strcpy(display_line[SECOND_LINE],"  TURNING ");
   \                     ??blackLine_8:
   \   00004C   3D40....     MOV.W   #`?<Constant "  TURNING ">`, R13
   \   000050   3C40....     MOV.W   #display_line + 11, R12
   \   000054   ........     CALLA   #strcpy
    146                if(drivePivot(FIRST))state = DRIVE;
   \   000058   1C43         MOV.W   #0x1, R12
   \   00005A   ........     CALLA   #drivePivot
   \   00005E   0C93         CMP.W   #0x0, R12
   \   000060   4624         JEQ     ??blackLine_3
   \   000062   F2406400.... MOV.B   #0x64, &state
    147                break;
   \   000068   1001         RETA
    148              case DRIVE:
    149                strcpy(display_line[SECOND_LINE],"  CIRCLING ");
   \                     ??blackLine_5:
   \   00006A   3D40....     MOV.W   #`?<Constant "  CIRCLING ">`, R13
   \   00006E   3C40....     MOV.W   #display_line + 11, R12
   \   000072   ........     CALLA   #strcpy
    150                display_changed = HIGH;
   \   000076   D243....     MOV.B   #0x1, &display_changed
    151                time_count_en = HIGH;
   \   00007A   9243....     MOV.W   #0x1, &time_count_en
    152                followCircle();
   \   00007E   ........     BRA     #followCircle
    153                break;
    154              case TURN2: 
    155                strcpy(display_line[SECOND_LINE],"  TURNING ");
   \                     ??blackLine_9:
   \   000082   3D40....     MOV.W   #`?<Constant "  TURNING ">`, R13
   \   000086   3C40....     MOV.W   #display_line + 11, R12
   \   00008A   ........     CALLA   #strcpy
    156                if(drivePivot(FIRST))state = STOP;
   \   00008E   1C43         MOV.W   #0x1, R12
   \   000090   ........     CALLA   #drivePivot
   \   000094   0C93         CMP.W   #0x0, R12
   \   000096   2B24         JEQ     ??blackLine_3
   \   000098   F2407300.... MOV.B   #0x73, &state
    157                break;
   \   00009E   1001         RETA
    158              case STOP:
    159                strcpy(display_line[SECOND_LINE],"  STOP   ");
   \                     ??blackLine_7:
   \   0000A0   3D40....     MOV.W   #`?<Constant "  STOP   ">`, R13
   \   0000A4   3C40....     MOV.W   #display_line + 11, R12
   \   0000A8   ........     CALLA   #strcpy
    160                display_changed = HIGH;
   \   0000AC   D243....     MOV.B   #0x1, &display_changed
    161                time_count_en = LOW;
   \   0000B0   8243....     MOV.W   #0x0, &time_count_en
    162                driveForward(CRUISE,CRUISE);
   \   0000B4   3D403075     MOV.W   #0x7530, R13
   \   0000B8   3C403075     MOV.W   #0x7530, R12
   \   0000BC   ........     CALLA   #driveForward
    163                waitTime = TWOSECS;
   \   0000C0   B2402800.... MOV.W   #0x28, &waitTime
    164                TB0CCTL2 &=~ CCIFG;
   \   0000C6   92C38603     BIC.W   #0x1, &0x386
    165                TB0CCTL2 |= CCIE;
   \   0000CA   B2D010008603 BIS.W   #0x10, &0x386
    166                if(endWait){
   \   0000D0   8293....     CMP.W   #0x0, &endWait
   \   0000D4   0C24         JEQ     ??blackLine_3
    167                    TB0CCTL2 &= ~CCIE;
   \   0000D6   B2C010008603 BIC.W   #0x10, &0x386
    168                    state = INTERCEPT;
   \   0000DC   F2406900.... MOV.B   #0x69, &state
    169                    endWait = RESET;
   \   0000E2   8243....     MOV.W   #0x0, &endWait
    170                    capture = LOW;
   \   0000E6   8243....     MOV.W   #0x0, &capture
    171                    All_Wheel_Off();
   \   0000EA   ........     CALLA   #All_Wheel_Off
    172                }
    173                break;
    174              default: break;
    175              }
    176          }
   \                     ??blackLine_3:
   \   0000EE   1001         RETA
   \   0000F0                REQUIRE _A_TB0CCTL2_L

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "CALIBRATE ">`:
   \   000000   43414C494252 DC8 "CALIBRATE "
   \            4154452000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "INTERCEPT ">`:
   \   000000   494E54455243 DC8 "INTERCEPT "
   \            4550542000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  TURNING ">`:
   \   000000   20205455524E DC8 "  TURNING "
   \            494E472000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  CIRCLING ">`:
   \   000000   202043495243 DC8 "  CIRCLING "
   \            4C494E472000

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  STOP   ">`:
   \   000000   202053544F50 DC8 "  STOP   "
   \            20202000    
    177          
    178          
    179          
    180          
    181          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   blackLine
        4   -> All_Wheel_Off
        0   -> calibrate
        4   -> driveForward
        4   -> drivePivot
        0   -> followCircle
        0   -> intercept
        4   -> strcpy
      4   main
        4   -> Display_Process
        4   -> Display_Update
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_Serial
        4   -> Init_Timers
        4   -> Recieved_Text
        4   -> Transmit_NCSU_A1
        4   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      12  ?<Constant "  CIRCLING ">
      10  ?<Constant "  STOP   ">
      11  ?<Constant "  TURNING ">
      11  ?<Constant "CALIBRATE ">
      11  ?<Constant "INTERCEPT ">
       2  Last_Time_Sequence
       2  _A_PM5CTL0_L
       2  _A_TB0CCTL2_L
     240  blackLine
       2  capture
       1  change
       1  chosen_direction
       2  cycle_time
       1  display_mode
     164  main
       1  slow_input_down
       2  switchONE
       2  switchTWO
       2  testTurn
       2  test_value
       2  time_change
       2  time_change2

 
 404 bytes in segment CODE
   4 bytes in segment DATA16_AN
  66 bytes in segment DATA16_C
  22 bytes in segment DATA16_Z
 
 404 bytes of CODE  memory
  66 bytes of CONST memory
  22 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
