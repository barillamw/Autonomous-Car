###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           03/Apr/2019  00:22:54
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        09\main.c
#    Command line  =  
#        -f C:\Users\Michael\AppData\Local\Temp\EWAA30.tmp
#        ("C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        09\main.c" -lC "C:\Users\Michael\Documents\2019\ECE
#        306\ECE-306_code\Homework 09\Debug\List" -o
#        "C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        09\Debug\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR2355__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        09\Debug\List\main.lst
#    Object file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework
#        09\Debug\Obj\main.r43
#
###############################################################################

C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework 09\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2018
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //------------------------------------------------------------------------------
     10          
     11          #include  "functions.h"
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     13          #include <string.h>
     14          #include "macros.h"
     15          
     16            // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     18          extern char display_line[FOURTH][COUNT_ELEVEN];
     19          extern char *display[FOURTH];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     21          extern volatile unsigned char display_changed;
     22          extern volatile unsigned char update_display;
     23          extern volatile unsigned int update_display_count;
     24          extern volatile unsigned int Time_Sequence;
     25          extern volatile char one_time;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     28          char change;
   \                     change:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          unsigned int Last_Time_Sequence;
   \                     Last_Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          unsigned int cycle_time;
   \                     cycle_time:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     31          unsigned int time_change;
   \                     time_change:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          unsigned int time_change2;
   \                     time_change2:
   \   000000                DS8 2
     33          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          unsigned int switchONE;
   \                     switchONE:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          unsigned int switchTWO;
   \                     switchTWO:
   \   000000                DS8 2
     36          
     37          
     38          extern unsigned int menu;
     39          extern unsigned int menu_select;
     40          
     41          
     42          
     43          
     44          
     45          
     46          

   \                                 In  segment CODE, align 2
     47          void main(void){
   \                     main:
     48          //------------------------------------------------------------------------------
     49          // Main Program
     50          // This is the main routine for the program. Execution of code starts here.
     51          // The operating system is Back Ground Fore Ground.
     52          //
     53          //------------------------------------------------------------------------------
     54          // Disable the GPIO power-on default high-impedance mode to activate
     55          // previously configured port settings
     56            
     57            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     58            
     59            Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     60            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     61            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     62            Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     63            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     64            Init_ADC();
   \   000018   ........     CALLA   #Init_ADC
     65            Init_Serial();
   \   00001C   ........     CALLA   #Init_Serial
     66            Begin_ADC();
   \   000020   ........     CALLA   #Begin_ADC
     67          
     68          // Place the contents of what you want on the display, in between the quotes
     69          // Limited to 10 characters per line
     70          //
     71          
     72            strcpy(display_line[FIRST_LINE], "          ");
   \   000024   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000028   3C40....     MOV.W   #display_line, R12
   \   00002C   ........     CALLA   #strcpy
     73            strcpy(display_line[SECOND_LINE], "          ");
   \   000030   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000034   3C40....     MOV.W   #display_line + 11, R12
   \   000038   ........     CALLA   #strcpy
     74            strcpy(display_line[THIRD_LINE], "          ");
   \   00003C   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000040   3C40....     MOV.W   #display_line + 22, R12
   \   000044   ........     CALLA   #strcpy
     75            strcpy(display_line[FOURTH_LINE], "          ");
   \   000048   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00004C   3C40....     MOV.W   #display_line + 33, R12
   \   000050   ........     CALLA   #strcpy
     76            display_changed = HIGH;
   \   000054   D243....     MOV.B   #0x1, &display_changed
     77            
     78            Display_Update(FOURTH_LINE,SECOND_LINE,FIRST_LINE,FIRST_LINE);
   \   000058   4F43         MOV.B   #0x0, R15
   \   00005A   4E43         MOV.B   #0x0, R14
   \   00005C   5D43         MOV.B   #0x1, R13
   \   00005E   7C400300     MOV.B   #0x3, R12
   \   000062   ........     CALLA   #Display_Update
     79          //------------------------------------------------------------------------------
     80          // Begining of the "While" Operating System
     81          //------------------------------------------------------------------------------
     82            while(ALWAYS) {                      // Can the Operating system run
     83              
     84              if(switchONE){
   \                     ??main_0:
   \   000066   8293....     CMP.W   #0x0, &switchONE
   \   00006A   0524         JEQ     ??main_1
     85                  switchONE = LOW;
   \   00006C   8243....     MOV.W   #0x0, &switchONE
     86                  //strcpy(display_line[THIRD_LINE], " SWITCH 1  ");
     87                  //display_changed = HIGH;
     88                  //capture = HIGH;
     89          
     90                  /*switch(serial_state){
     91                    case RECIEVING:
     92                      serial_state = TRANSMITTING;
     93                      once = HIGH;
     94                      break;
     95                  case TRANSMITTING:
     96                    serial_state = WAITING;
     97                    clear();
     98                    break;
     99                  }*/
    100                  menu_select = menu;
   \   000070   9242........ MOV.W   &menu, &menu_select
    101                  
    102              }
    103              if(switchTWO){
   \                     ??main_1:
   \   000076   8293....     CMP.W   #0x0, &switchTWO
   \   00007A   0424         JEQ     ??main_2
    104                  switchTWO = LOW;
   \   00007C   8243....     MOV.W   #0x0, &switchTWO
    105                  //strcpy(display_line[FOURTH_LINE], " SWITCH 2  ");
    106                  //display_changed = HIGH;
    107                  //Begin_ADC();
    108                  //testSignal = HIGH;
    109                  /*switch(freq){
    110                  case K115:
    111                    freq = K460;
    112                    break;
    113                  case K460:
    114                    freq = K115;
    115                    break;
    116                  }
    117                  Configure_Serial();
    118                  Begin_Serial();*/
    119                  menu_select = RESET;
   \   000080   8243....     MOV.W   #0x0, &menu_select
    120              }
    121          
    122              Menu_Process();
   \                     ??main_2:
   \   000084   ........     CALLA   #Menu_Process
    123              display_changed = HIGH;
   \   000088   D243....     MOV.B   #0x1, &display_changed
    124              Display_Process();
   \   00008C   ........     CALLA   #Display_Process
   \   000090   EA3F         JMP     ??main_0
   \   000092   0343         NOP
   \   000094                REQUIRE _A_PM5CTL0_L
    125            }
    126          //------------------------------------------------------------------------------
    127          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  
    128          
    129          
    130          
    131          
    132          
    133          
    134          
    135          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Begin_ADC
        4   -> Display_Process
        4   -> Display_Update
        4   -> Init_ADC
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_Serial
        4   -> Init_Timers
        4   -> Menu_Process
        4   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
       2  Last_Time_Sequence
       2  _A_PM5CTL0_L
       1  change
       1  chosen_direction
       2  cycle_time
       1  display_mode
     148  main
       1  slow_input_down
       2  switchONE
       2  switchTWO
       2  test_value
       2  time_change
       2  time_change2

 
 148 bytes in segment CODE
   2 bytes in segment DATA16_AN
  11 bytes in segment DATA16_C
  18 bytes in segment DATA16_Z
 
 148 bytes of CODE  memory
  11 bytes of CONST memory
  18 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
