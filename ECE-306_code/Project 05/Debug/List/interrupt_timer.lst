###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           25/Feb/2019  12:59:34
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        05\interrupt_timer.c
#    Command line  =  
#        -f C:\Users\Michael\AppData\Local\Temp\EWE4DE.tmp
#        ("C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        05\interrupt_timer.c" -lC "C:\Users\Michael\Documents\2019\ECE
#        306\ECE-306_code\Project 05\Debug\List" -o
#        "C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        05\Debug\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR2355__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        05\Debug\List\interrupt_timer.lst
#    Object file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        05\Debug\Obj\interrupt_timer.r43
#
###############################################################################

C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project 05\interrupt_timer.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Michael Barilla
      4          //  Feb 2019
      5          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      6          //
      7          //   Description: This file contains the interrupt functions for the B0-0  
      8          //     and B0-1,2, overflow timers
      9          //
     10          //------------------------------------------------------------------------------
     11          
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x21a
   \   union <unnamed> _A_PAIE_L
   \                     _A_PAIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x21c
   \   union <unnamed> _A_PAIFG_L
   \                     _A_PAIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23c
   \   union <unnamed> _A_PBIFG_L
   \                     _A_PBIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x384
   \   union <unnamed> _A_TB0CCTL1_L
   \                     _A_TB0CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x386
   \   union <unnamed> _A_TB0CCTL2_L
   \                     _A_TB0CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x394
   \   union <unnamed> _A_TB0CCR1_L
   \                     _A_TB0CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x396
   \   union <unnamed> _A_TB0CCR2_L
   \                     _A_TB0CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3ae
   \   union <unnamed> _A_TB0IV_L
   \                     _A_TB0IV_L:
   \   000000                DS8 2
     13          #include  "macros.h"
     14          
     15          
     16          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          unsigned int blink_count;
   \                     blink_count:
   \   000000                DS8 2
     20          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     21          volatile unsigned int debounce1;
   \                     debounce1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          volatile unsigned int debounce1_count;
   \                     debounce1_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          volatile unsigned int debounce2;
   \                     debounce2:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          volatile unsigned int debounce2_count;
   \                     debounce2_count:
   \   000000                DS8 2
     25          
     26          extern volatile unsigned char update_display;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          unsigned int update_count;
   \                     update_count:
   \   000000                DS8 2
     28          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          volatile unsigned int newSecond;
   \                     newSecond:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          unsigned int second_count;
   \                     second_count:
   \   000000                DS8 2
     31          
     32          
     33          
     34          #pragma vector = TIMER0_B0_VECTOR // Timer B0 – 0 Capture compare

   \                                 In  segment ISR_CODE, align 2
     35          __interrupt void Timer0_B0_ISR(void){
   \                     Timer0_B0_ISR:
   \   000000   1F15         PUSHM.W #0x2, R15
     36          //--------------------------------------------------------------------
     37          // TimerB0 0 Interrupt handler
     38          //--------------------------------------------------------------------
     39            /*// LCD Backlight
     40            if(blink_count++ > COUNT_TEN){
     41              blink_count = RESET_STATE; // Reset for next count
     42              P6OUT ^= LCD_BACKLITE; // Flip State of LCD_BACKLITE
     43            }*/
     44            
     45            
     46            if(update_count++ >COUNT_FOUR){
   \   000002   1F42....     MOV.W   &update_count, R15
   \   000006   0E4F         MOV.W   R15, R14
   \   000008   1E53         ADD.W   #0x1, R14
   \   00000A   824E....     MOV.W   R14, &update_count
   \   00000E   3F900500     CMP.W   #0x5, R15
   \   000012   0428         JNC     ??Timer0_B0_ISR_0
     47                  update_count = LOW;
   \   000014   8243....     MOV.W   #0x0, &update_count
     48                  update_display = HIGH;
   \   000018   D243....     MOV.B   #0x1, &update_display
     49            }
     50            
     51            if (second_count++ > 20){
   \                     ??Timer0_B0_ISR_0:
   \   00001C   1F42....     MOV.W   &second_count, R15
   \   000020   0E4F         MOV.W   R15, R14
   \   000022   1E53         ADD.W   #0x1, R14
   \   000024   824E....     MOV.W   R14, &second_count
   \   000028   3F901500     CMP.W   #0x15, R15
   \   00002C   0428         JNC     ??Timer0_B0_ISR_1
     52              second_count = LOW;
   \   00002E   8243....     MOV.W   #0x0, &second_count
     53              newSecond = HIGH;
   \   000032   9243....     MOV.W   #0x1, &newSecond
     54            }
     55              
     56            // Time Sequence
     57            one_time = HIGH;
   \                     ??Timer0_B0_ISR_1:
   \   000036   D243....     MOV.B   #0x1, &one_time
     58            if(Time_Sequence++ > 250){
   \   00003A   1F42....     MOV.W   &Time_Sequence, R15
   \   00003E   0E4F         MOV.W   R15, R14
   \   000040   1E53         ADD.W   #0x1, R14
   \   000042   824E....     MOV.W   R14, &Time_Sequence
   \   000046   3F90FB00     CMP.W   #0xfb, R15
   \   00004A   0228         JNC     ??Timer0_B0_ISR_2
     59              Time_Sequence = RESET_STATE;
   \   00004C   8243....     MOV.W   #0x0, &Time_Sequence
     60            }
     61          
     62            
     63           
     64            
     65            //CHANGE_PROBE;
     66            TB0CCR0 += TB0CCR0_INTERVAL; // Add interval Offset to TBCCR0
   \                     ??Timer0_B0_ISR_2:
   \   000050   B250A8619203 ADD.W   #0x61a8, &0x392
     67          //--------------------------------------------------------------------
     68          }
   \   000056   1E17         POPM.W  #0x2, R15
   \   000058   0013         RETI
   \   00005A                REQUIRE _A_TB0CCR0_L
     69          
     70          #pragma vector = TIMER0_B1_VECTOR // Timer B0 – 1 Capture compare

   \                                 In  segment ISR_CODE, align 2
     71          __interrupt void Timer0_B1_ISR(void){
   \                     Timer0_B1_ISR:
   \   000000   1F15         PUSHM.W #0x2, R15
     72          //--------------------------------------------------------------------
     73          // TimerB0 1 Interrupt handler
     74          //--------------------------------------------------------------------
     75            switch(__even_in_range(TB0IV,S14)){
   \   000002   1F42AE03     MOV.W   &0x3ae, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for Timer0_B1_ISR>_0`:
   \   000008   403C         JMP     ??Timer0_B1_ISR_1
   \   00000A   063C         JMP     ??Timer0_B1_ISR_4
   \   00000C   393C         JMP     ??Timer0_B1_ISR_5
   \   00000E   3D3C         JMP     ??Timer0_B1_ISR_1
   \   000010   3C3C         JMP     ??Timer0_B1_ISR_1
   \   000012   3B3C         JMP     ??Timer0_B1_ISR_1
   \   000014   3A3C         JMP     ??Timer0_B1_ISR_1
   \   000016   393C         JMP     ??Timer0_B1_ISR_1
     76            case S0: break;                //No Interrupt
     77            case S2:                       //CCR1 
     78              if (debounce1){
   \                     ??Timer0_B1_ISR_4:
   \   000018   8293....     CMP.W   #0x0, &debounce1
   \   00001C   1424         JEQ     ??Timer0_B1_ISR_2
     79                if(debounce1_count++ > COUNT_TEN){
   \   00001E   1F42....     MOV.W   &debounce1_count, R15
   \   000022   0E4F         MOV.W   R15, R14
   \   000024   1E53         ADD.W   #0x1, R14
   \   000026   824E....     MOV.W   R14, &debounce1_count
   \   00002A   3F900B00     CMP.W   #0xb, R15
   \   00002E   0B28         JNC     ??Timer0_B1_ISR_2
     80                  debounce1 = LOW;
   \   000030   8243....     MOV.W   #0x0, &debounce1
     81                  debounce1_count = LOW;
   \   000034   8243....     MOV.W   #0x0, &debounce1_count
     82                  P4IFG &= ~SW1;                //Clear all Sw1 inerrupt flags
   \   000038   E2C33D02     BIC.B   #0x2, &0x23d
     83                  P4IE |= SW1;                  //Sw1 interrupt enabled
   \   00003C   E2D33B02     BIS.B   #0x2, &0x23b
     84                  TB0CCTL1 &= ~CCIE;            // CCR1 disable interrupt
   \   000040   B2C010008403 BIC.W   #0x10, &0x384
     85                }
     86              }
     87              if(debounce2){
   \                     ??Timer0_B1_ISR_2:
   \   000046   8293....     CMP.W   #0x0, &debounce2
   \   00004A   1424         JEQ     ??Timer0_B1_ISR_3
     88                if(debounce2_count++ > COUNT_TEN){
   \   00004C   1F42....     MOV.W   &debounce2_count, R15
   \   000050   0E4F         MOV.W   R15, R14
   \   000052   1E53         ADD.W   #0x1, R14
   \   000054   824E....     MOV.W   R14, &debounce2_count
   \   000058   3F900B00     CMP.W   #0xb, R15
   \   00005C   0B28         JNC     ??Timer0_B1_ISR_3
     89                  debounce2 = LOW;
   \   00005E   8243....     MOV.W   #0x0, &debounce2
     90                  debounce2_count = LOW;
   \   000062   8243....     MOV.W   #0x0, &debounce2_count
     91                  P2IFG &= ~SW2;                //Clear all Sw1 inerrupt flags
   \   000066   F2C21D02     BIC.B   #0x8, &0x21d
     92                  P2IE |= SW2;                  //Sw1 interrupt enabled
   \   00006A   F2D21B02     BIS.B   #0x8, &0x21b
     93                  TB0CCTL1 &= ~CCIE;            // CCR1 disable interrupt
   \   00006E   B2C010008403 BIC.W   #0x10, &0x384
     94                }
     95              }
     96              TB0CCTL1 &= ~CCIFG;               // CCR1 clear interrupt flag
   \                     ??Timer0_B1_ISR_3:
   \   000074   92C38403     BIC.W   #0x1, &0x384
     97              TB0CCR1 += TB0CCR1_INTERVAL;      // Add interval Offset to TBCCR1
   \   000078   B250409C9403 ADD.W   #0x9c40, &0x394
     98              break;
   \   00007E   053C         JMP     ??Timer0_B1_ISR_1
     99            case S4: 
    100              TB0CCTL2 &= ~CCIFG; 
   \                     ??Timer0_B1_ISR_5:
   \   000080   92C38603     BIC.W   #0x1, &0x386
    101              TB0CCR2 += TB0CCR2_INTERVAL;
   \   000084   B25010279603 ADD.W   #0x2710, &0x396
    102            case S14: break;
    103            default: break;
    104            }
    105          //--------------------------------------------------------------------
    106          }
   \                     ??Timer0_B1_ISR_1:
   \   00008A   1E17         POPM.W  #0x2, R15
   \   00008C   0013         RETI
   \   00008E                REQUIRE _A_PBIFG_L
   \   00008E                REQUIRE _A_PBIE_L
   \   00008E                REQUIRE _A_TB0CCTL1_L
   \   00008E                REQUIRE _A_PAIFG_L
   \   00008E                REQUIRE _A_PAIE_L
   \   00008E                REQUIRE _A_TB0CCR1_L
   \   00008E                REQUIRE _A_TB0CCTL2_L
   \   00008E                REQUIRE _A_TB0CCR2_L
   \   00008E                REQUIRE _A_TB0IV_L

   \                                 In  segment INTVEC, offset 0x54, root
   \                     `??Timer0_B1_ISR::??INTVEC 84`:
   \   000054   ....         DC16    Timer0_B1_ISR

   \                                 In  segment INTVEC, offset 0x56, root
   \                     `??Timer0_B0_ISR::??INTVEC 86`:
   \   000056   ....         DC16    Timer0_B0_ISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      8   Timer0_B0_ISR
      8   Timer0_B1_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  Time_Sequence
      90  Timer0_B0_ISR
       2  Timer0_B0_ISR::??INTVEC 86
     142  Timer0_B1_ISR
       2  Timer0_B1_ISR::??INTVEC 84
       2  _A_PAIE_L
       2  _A_PAIFG_L
       2  _A_PBIE_L
       2  _A_PBIFG_L
       2  _A_TB0CCR0_L
       2  _A_TB0CCR1_L
       2  _A_TB0CCR2_L
       2  _A_TB0CCTL1_L
       2  _A_TB0CCTL2_L
       2  _A_TB0IV_L
       2  blink_count
       2  debounce1
       2  debounce1_count
       2  debounce2
       2  debounce2_count
       2  newSecond
       1  one_time
       2  second_count
       2  update_count

 
  20 bytes in segment DATA16_AN
  19 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
 232 bytes in segment ISR_CODE
 
 232 bytes of CODE  memory
   0 bytes of CONST memory (+  4 bytes shared)
  19 bytes of DATA  memory (+ 20 bytes shared)

Errors: none
Warnings: none
