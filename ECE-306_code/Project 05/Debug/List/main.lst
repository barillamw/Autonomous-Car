###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           25/Feb/2019  12:59:34
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project 05\main.c
#    Command line  =  
#        -f C:\Users\Michael\AppData\Local\Temp\EWE5FA.tmp
#        ("C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        05\main.c" -lC "C:\Users\Michael\Documents\2019\ECE
#        306\ECE-306_code\Project 05\Debug\List" -o
#        "C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        05\Debug\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR2355__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        05\Debug\List\main.lst
#    Object file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        05\Debug\Obj\main.r43
#
###############################################################################

C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project 05\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2018
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //------------------------------------------------------------------------------
     10          
     11          #include  "functions.h"
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2
     13          #include <string.h>
     14          #include "macros.h"
     15          
     16            // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     18          extern char display_line[FOURTH][COUNT_ELEVEN];
     19          extern char *display[FOURTH];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     21          extern volatile unsigned char display_changed;
     22          extern volatile unsigned char update_display;
     23          extern volatile unsigned int update_display_count;
     24          extern volatile unsigned int Time_Sequence;
     25          extern volatile char one_time;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     28          char change;
   \                     change:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          unsigned int Last_Time_Sequence;
   \                     Last_Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          unsigned int cycle_time;
   \                     cycle_time:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     31          unsigned int time_change;
   \                     time_change:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          unsigned int time_change2;
   \                     time_change2:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          unsigned char event;
   \                     event:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          unsigned char state;
   \                     state:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          unsigned char shape;
   \                     shape:
   \   000000                DS8 1
     36          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          unsigned int switchONE;
   \                     switchONE:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          unsigned int switchTWO;
   \                     switchTWO:
   \   000000                DS8 2
     39          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     40          unsigned int runCar;
   \                     runCar:
   \   000000                DS8 2
     41          
     42          

   \                                 In  segment CODE, align 2
     43          void main(void){
   \                     main:
     44          //------------------------------------------------------------------------------
     45          // Main Program
     46          // This is the main routine for the program. Execution of code starts here.
     47          // The operating system is Back Ground Fore Ground.
     48          //
     49          //------------------------------------------------------------------------------
     50          // Disable the GPIO power-on default high-impedance mode to activate
     51          // previously configured port settings
     52            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     53            
     54            Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     55            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     56            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     57            Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     58            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     59          // Place the contents of what you want on the display, in between the quotes
     60          // Limited to 10 characters per line
     61          //
     62          
     63            strcpy(display_line[FIRST_LINE], "   NCSU   ");
   \   000018   3D40....     MOV.W   #`?<Constant "   NCSU   ">`, R13
   \   00001C   3C40....     MOV.W   #display_line, R12
   \   000020   ........     CALLA   #strcpy
     64            display_changed = HIGH;
   \   000024   D243....     MOV.B   #0x1, &display_changed
     65            //update_string(display_line[FIRST_LINE], FIRST_LINE);
     66            strcpy(display_line[SECOND_LINE], " WOLFPACK ");
   \   000028   3D40....     MOV.W   #`?<Constant " WOLFPACK ">`, R13
   \   00002C   3C40....     MOV.W   #display_line + 11, R12
   \   000030   ........     CALLA   #strcpy
     67            display_changed = HIGH;
   \   000034   D243....     MOV.B   #0x1, &display_changed
     68            //update_string(display_line[SECOND_LINE], SECOND_LINE);
     69            strcpy(display_line[THIRD_LINE], "  ECE306  ");
   \   000038   3D40....     MOV.W   #`?<Constant "  ECE306  ">`, R13
   \   00003C   3C40....     MOV.W   #display_line + 22, R12
   \   000040   ........     CALLA   #strcpy
     70            display_changed = HIGH;
   \   000044   D243....     MOV.B   #0x1, &display_changed
     71            //update_string(display_line[FOURTH_LINE], FOURTH_LINE);
     72          
     73            Display_Update(FOURTH_LINE,SECOND_LINE,FIRST_LINE,FIRST_LINE);
   \   000048   4F43         MOV.B   #0x0, R15
   \   00004A   4E43         MOV.B   #0x0, R14
   \   00004C   5D43         MOV.B   #0x1, R13
   \   00004E   7C400300     MOV.B   #0x3, R12
   \   000052   ........     CALLA   #Display_Update
     74          
     75          //------------------------------------------------------------------------------
     76          // Begining of the "While" Operating System
     77          //------------------------------------------------------------------------------
     78            while(ALWAYS) {                      // Can the Operating system run
     79              switch(Time_Sequence){
   \                     ??main_0:
   \   000056   1F42....     MOV.W   &Time_Sequence, R15
   \   00005A   3F800500     SUB.W   #0x5, R15
   \   00005E   3924         JEQ     ??main_8
   \   000060   3F800500     SUB.W   #0x5, R15
   \   000064   2924         JEQ     ??main_9
   \   000066   3F800500     SUB.W   #0x5, R15
   \   00006A   1B24         JEQ     ??main_10
   \   00006C   3F800500     SUB.W   #0x5, R15
   \   000070   0F24         JEQ     ??main_11
   \   000072   3F800500     SUB.W   #0x5, R15
   \   000076   3720         JNE     ??main_7
     80                case S1250:                        //
     81                  if(one_time){
   \   000078   C293....     CMP.B   #0x0, &one_time
   \   00007C   3424         JEQ     ??main_7
     82                    Init_LEDs();
   \   00007E   ........     CALLA   #Init_LEDs
     83                    lcd_BIG_mid();
   \   000082   ........     CALLA   #lcd_BIG_mid
     84                    //strcpy(display_line[THIRD_LINE], " STRAIGHT  ");
     85                    display_changed = HIGH;
   \   000086   D243....     MOV.B   #0x1, &display_changed
     86                    one_time = RESET_STATE;
   \   00008A   C243....     MOV.B   #0x0, &one_time
     87                  }
     88                  //Time_Sequence = RESET_STATE;             //
     89                  break;
   \   00008E   2B3C         JMP     ??main_7
     90                case S1000:                        //
     91                  if(one_time){
   \                     ??main_11:
   \   000090   C293....     CMP.B   #0x0, &one_time
   \   000094   2824         JEQ     ??main_7
     92                    GREEN_LED_ON;            // Change State of LED 5
   \   000096   F2D040004302 BIS.B   #0x40, &0x243
     93                    one_time = RESET_STATE;
   \   00009C   C243....     MOV.B   #0x0, &one_time
     94                  }
     95                  break;
   \   0000A0   223C         JMP     ??main_7
     96                case S750:                         //
     97                  if(one_time){
   \                     ??main_10:
   \   0000A2   C293....     CMP.B   #0x0, &one_time
   \   0000A6   1F24         JEQ     ??main_7
     98                    RED_LED_ON;            // Change State of LED 4
   \   0000A8   D2D30202     BIS.B   #0x1, &0x202
     99                    GREEN_LED_OFF;           // Change State of LED 5
   \   0000AC   F2C040004302 BIC.B   #0x40, &0x243
    100                    one_time = RESET_STATE;
   \   0000B2   C243....     MOV.B   #0x0, &one_time
    101                  }
    102                  break;
   \   0000B6   173C         JMP     ??main_7
    103                case S500:                         //
    104                  if(one_time){
   \                     ??main_9:
   \   0000B8   C293....     CMP.B   #0x0, &one_time
   \   0000BC   1424         JEQ     ??main_7
    105                    lcd_4line();
   \   0000BE   ........     CALLA   #lcd_4line
    106                    GREEN_LED_ON;            // Change State of LED 5
   \   0000C2   F2D040004302 BIS.B   #0x40, &0x243
    107                    display_changed = HIGH;
   \   0000C8   D243....     MOV.B   #0x1, &display_changed
    108                    one_time = LOW;
   \   0000CC   C243....     MOV.B   #0x0, &one_time
    109                  }
    110                  break;
   \   0000D0   0A3C         JMP     ??main_7
    111                case  S250:                        //
    112                  if(one_time){
   \                     ??main_8:
   \   0000D2   C293....     CMP.B   #0x0, &one_time
   \   0000D6   0724         JEQ     ??main_7
    113                    RED_LED_OFF;           // Change State of LED 4
   \   0000D8   D2C30202     BIC.B   #0x1, &0x202
    114                    GREEN_LED_OFF;           // Change State of LED 5
   \   0000DC   F2C040004302 BIC.B   #0x40, &0x243
    115                    one_time = RESET_STATE;
   \   0000E2   C243....     MOV.B   #0x0, &one_time
    116                  }
    117                  break;                         //
    118                default: break;
    119              }
    120              
    121              if (Last_Time_Sequence != Time_Sequence){
   \                     ??main_7:
   \   0000E6   9292........ CMP.W   &Time_Sequence, &Last_Time_Sequence
   \   0000EC   0924         JEQ     ??main_12
    122                Last_Time_Sequence = Time_Sequence;
   \   0000EE   9242........ MOV.W   &Time_Sequence, &Last_Time_Sequence
    123                cycle_time++;
   \   0000F4   9253....     ADD.W   #0x1, &cycle_time
    124                time_change = HIGH;
   \   0000F8   9243....     MOV.W   #0x1, &time_change
    125                time_change2 = HIGH;
   \   0000FC   9243....     MOV.W   #0x1, &time_change2
    126              } 
    127              
    128              if(switchONE){
   \                     ??main_12:
   \   000100   8293....     CMP.W   #0x0, &switchONE
   \   000104   0C24         JEQ     ??main_13
    129                  switchONE = LOW;
   \   000106   8243....     MOV.W   #0x0, &switchONE
    130                  strcpy(display_line[THIRD_LINE], " SWITCH 1  ");
   \   00010A   3D40....     MOV.W   #`?<Constant " SWITCH 1  ">`, R13
   \   00010E   3C40....     MOV.W   #display_line + 22, R12
   \   000112   ........     CALLA   #strcpy
    131                  display_changed = HIGH;
   \   000116   D243....     MOV.B   #0x1, &display_changed
    132                  runCar = HIGH;
   \   00011A   9243....     MOV.W   #0x1, &runCar
    133                  
    134              }
    135              if(switchTWO){
   \                     ??main_13:
   \   00011E   8293....     CMP.W   #0x0, &switchTWO
   \   000122   0A24         JEQ     ??main_14
    136                  switchTWO = LOW;
   \   000124   8243....     MOV.W   #0x0, &switchTWO
    137                  strcpy(display_line[THIRD_LINE], " SWITCH 2  ");
   \   000128   3D40....     MOV.W   #`?<Constant " SWITCH 2  ">`, R13
   \   00012C   3C40....     MOV.W   #display_line + 22, R12
   \   000130   ........     CALLA   #strcpy
    138                  display_changed = HIGH;
   \   000134   D243....     MOV.B   #0x1, &display_changed
    139              }
    140              
    141              if(runCar){
   \                     ??main_14:
   \   000138   8293....     CMP.W   #0x0, &runCar
   \   00013C   0224         JEQ     ??main_15
    142                drive();
   \   00013E   ........     CALLA   #drive
    143              }
    144              
    145              
    146          
    147              
    148          
    149              
    150          //    Switches_Process();                // Check for switch state change
    151              Display_Process();
   \                     ??main_15:
   \   000142   ........     CALLA   #Display_Process
   \   000146   873F         JMP     ??main_0
   \   000148   0343         NOP
   \   00014A                REQUIRE _A_PM5CTL0_L
   \   00014A                REQUIRE _A_PCOUT_L
   \   00014A                REQUIRE _A_PAOUT_L
    152          //  paths();
    153          //  Wheels();
    154          
    155            }
    156          //------------------------------------------------------------------------------
    157          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   NCSU   ">`:
   \   000000   2020204E4353 DC8 "   NCSU   "
   \            5520202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " WOLFPACK ">`:
   \   000000   20574F4C4650 DC8 " WOLFPACK "
   \            41434B2000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  ECE306  ">`:
   \   000000   202045434533 DC8 "  ECE306  "
   \            3036202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " SWITCH 1  ">`:
   \   000000   205357495443 DC8 " SWITCH 1  "
   \            482031202000

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant " SWITCH 2  ">`:
   \   000000   205357495443 DC8 " SWITCH 2  "
   \            482032202000
    158          
    159          
    160          
    161          
    162          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> Display_Process
        4   -> Display_Update
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_LEDs
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> drive
        4   -> lcd_4line
        4   -> lcd_BIG_mid
        4   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "   NCSU   ">
      11  ?<Constant "  ECE306  ">
      12  ?<Constant " SWITCH 1  ">
      12  ?<Constant " SWITCH 2  ">
      11  ?<Constant " WOLFPACK ">
       2  Last_Time_Sequence
       2  _A_PAOUT_L
       2  _A_PCOUT_L
       2  _A_PM5CTL0_L
       1  change
       1  chosen_direction
       2  cycle_time
       1  display_mode
       1  event
     330  main
       2  runCar
       1  shape
       1  slow_input_down
       1  state
       2  switchONE
       2  switchTWO
       2  test_value
       2  time_change
       2  time_change2

 
 330 bytes in segment CODE
   6 bytes in segment DATA16_AN
  57 bytes in segment DATA16_C
  23 bytes in segment DATA16_Z
 
 330 bytes of CODE  memory
  57 bytes of CONST memory
  23 bytes of DATA  memory (+ 6 bytes shared)

Errors: none
Warnings: none
