###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           20/Apr/2019  14:12:29
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project 07\main.c
#    Command line  =  
#        -f C:\Users\Michael\AppData\Local\Temp\EW148F.tmp
#        ("C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        07\main.c" -lC "C:\Users\Michael\Documents\2019\ECE
#        306\ECE-306_code\Project 07\Debug\List" -o
#        "C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        07\Debug\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR2355__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        07\Debug\List\main.lst
#    Object file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        07\Debug\Obj\main.r43
#
###############################################################################

C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project 07\main.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Main Routine - "While" Operating System
      4          //
      5          //
      6          //  Jim Carlson
      7          //  Jan 2018
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //------------------------------------------------------------------------------
     10          
     11          #include  "functions.h"
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x130
   \   union <unnamed> _A_PM5CTL0_L
   \                     _A_PM5CTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x386
   \   union <unnamed> _A_TB0CCTL2_L
   \                     _A_TB0CCTL2_L:
   \   000000                DS8 2
     13          #include <string.h>
     14          #include "macros.h"
     15          
     16            // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          volatile char slow_input_down;
   \                     slow_input_down:
   \   000000                DS8 1
     18          extern char display_line[FOURTH][COUNT_ELEVEN];
     19          extern char *display[FOURTH];

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          unsigned char display_mode;
   \                     display_mode:
   \   000000                DS8 1
     21          extern volatile unsigned char display_changed;
     22          extern volatile unsigned char update_display;
     23          extern volatile unsigned int update_display_count;
     24          extern volatile unsigned int Time_Sequence;
     25          extern volatile char one_time;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          unsigned int test_value;
   \                     test_value:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          char chosen_direction;
   \                     chosen_direction:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     28          char change;
   \                     change:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     29          unsigned int Last_Time_Sequence;
   \                     Last_Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          unsigned int cycle_time;
   \                     cycle_time:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     31          unsigned int time_change;
   \                     time_change:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          unsigned int time_change2;
   \                     time_change2:
   \   000000                DS8 2
     33          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          unsigned int switchONE;
   \                     switchONE:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          unsigned int switchTWO;
   \                     switchTWO:
   \   000000                DS8 2
     36          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     37          unsigned int capture;
   \                     capture:
   \   000000                DS8 2
     38          extern volatile unsigned int newSecond;
     39          extern char state;
     40          extern unsigned int time_count_en;
     41          extern unsigned int runDrive;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     42          unsigned int testTurn;
   \                     testTurn:
   \   000000                DS8 2
     43          
     44          extern unsigned int waitTime;
     45          extern unsigned int endWait;
     46          
     47          
     48          

   \                                 In  segment CODE, align 2
     49          void main(void){
   \                     main:
     50          //------------------------------------------------------------------------------
     51          // Main Program
     52          // This is the main routine for the program. Execution of code starts here.
     53          // The operating system is Back Ground Fore Ground.
     54          //
     55          //------------------------------------------------------------------------------
     56          // Disable the GPIO power-on default high-impedance mode to activate
     57          // previously configured port settings
     58            
     59            PM5CTL0 &= ~LOCKLPM5;
   \   000000   92C33001     BIC.W   #0x1, &0x130
     60            
     61            Init_Ports();                        // Initialize Ports
   \   000004   ........     CALLA   #Init_Ports
     62            Init_Clocks();                       // Initialize Clock System
   \   000008   ........     CALLA   #Init_Clocks
     63            Init_Conditions();                   // Initialize Variables and Initial Conditions
   \   00000C   ........     CALLA   #Init_Conditions
     64            Init_Timers();                       // Initialize Timers
   \   000010   ........     CALLA   #Init_Timers
     65            Init_LCD();                          // Initialize LCD
   \   000014   ........     CALLA   #Init_LCD
     66            Init_ADC();
   \   000018   ........     CALLA   #Init_ADC
     67          // Place the contents of what you want on the display, in between the quotes
     68          // Limited to 10 characters per line
     69          //
     70          
     71            strcpy(display_line[FIRST_LINE], "          ");
   \   00001C   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000020   3C40....     MOV.W   #display_line, R12
   \   000024   ........     CALLA   #strcpy
     72            //update_string(display_line[FIRST_LINE], FIRST_LINE);
     73            strcpy(display_line[SECOND_LINE], "          ");
   \   000028   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   00002C   3C40....     MOV.W   #display_line + 11, R12
   \   000030   ........     CALLA   #strcpy
     74            //update_string(display_line[SECOND_LINE], SECOND_LINE);
     75            strcpy(display_line[THIRD_LINE], "          ");
   \   000034   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000038   3C40....     MOV.W   #display_line + 22, R12
   \   00003C   ........     CALLA   #strcpy
     76            strcpy(display_line[FOURTH_LINE], "          ");
   \   000040   3D40....     MOV.W   #`?<Constant "          ">`, R13
   \   000044   3C40....     MOV.W   #display_line + 33, R12
   \   000048   ........     CALLA   #strcpy
     77            display_changed = HIGH;
   \   00004C   D243....     MOV.B   #0x1, &display_changed
     78            //update_string(display_line[FOURTH_LINE], FOURTH_LINE);
     79            
     80              Display_Update(FOURTH_LINE,SECOND_LINE,FIRST_LINE,FIRST_LINE);
   \   000050   4F43         MOV.B   #0x0, R15
   \   000052   4E43         MOV.B   #0x0, R14
   \   000054   5D43         MOV.B   #0x1, R13
   \   000056   7C400300     MOV.B   #0x3, R12
   \   00005A   ........     CALLA   #Display_Update
     81          //------------------------------------------------------------------------------
     82          // Begining of the "While" Operating System
     83          //------------------------------------------------------------------------------
     84            while(ALWAYS) {                      // Can the Operating system run
     85              
     86              if(switchONE){
   \                     ??main_0:
   \   00005E   8293....     CMP.W   #0x0, &switchONE
   \   000062   0624         JEQ     ??main_5
     87                  switchONE = LOW;
   \   000064   8243....     MOV.W   #0x0, &switchONE
     88                  //strcpy(display_line[THIRD_LINE], " SWITCH 1  ");
     89                  display_changed = HIGH;
   \   000068   D243....     MOV.B   #0x1, &display_changed
     90                  capture = HIGH;
   \   00006C   9243....     MOV.W   #0x1, &capture
     91                  
     92              }
     93              if(switchTWO){
   \                     ??main_5:
   \   000070   8293....     CMP.W   #0x0, &switchTWO
   \   000074   0B24         JEQ     ??main_6
     94                  switchTWO = LOW;
   \   000076   8243....     MOV.W   #0x0, &switchTWO
     95                  //strcpy(display_line[THIRD_LINE], " SWITCH 2  ");
     96                  display_changed = HIGH;
   \   00007A   D243....     MOV.B   #0x1, &display_changed
     97                  P5OUT &= ~IR_LED;
   \   00007E   F2C010004202 BIC.B   #0x10, &0x242
     98                  Begin_ADC();
   \   000084   ........     CALLA   #Begin_ADC
     99                  testTurn = HIGH;
   \   000088   9243....     MOV.W   #0x1, &testTurn
    100                  
    101          
    102          
    103                  
    104              }
    105              switch(state){
   \                     ??main_6:
   \   00008C   5E42....     MOV.B   &state, R14
   \   000090   7E806300     SUB.B   #0x63, R14
   \   000094   0D24         JEQ     ??main_7
   \   000096   5E83         SUB.B   #0x1, R14
   \   000098   3024         JEQ     ??main_8
   \   00009A   7E800500     SUB.B   #0x5, R14
   \   00009E   1324         JEQ     ??main_9
   \   0000A0   7E800A00     SUB.B   #0xa, R14
   \   0000A4   4424         JEQ     ??main_10
   \   0000A6   5E83         SUB.B   #0x1, R14
   \   0000A8   1924         JEQ     ??main_11
   \   0000AA   5E83         SUB.B   #0x1, R14
   \   0000AC   3124         JEQ     ??main_12
   \   0000AE   663C         JMP     ??main_4
    106              case CALIBRATE:
    107                strcpy(display_line[SECOND_LINE],"CALIBRATE ");
   \                     ??main_7:
   \   0000B0   3D40....     MOV.W   #`?<Constant "CALIBRATE ">`, R13
   \   0000B4   3C40....     MOV.W   #display_line + 11, R12
   \   0000B8   ........     CALLA   #strcpy
    108                display_changed = HIGH;
   \   0000BC   D243....     MOV.B   #0x1, &display_changed
    109                calibrate();
   \   0000C0   ........     CALLA   #calibrate
    110                break;
   \   0000C4   5B3C         JMP     ??main_4
    111              case INTERCEPT:
    112                strcpy(display_line[SECOND_LINE],"INTERCEPT ");
   \                     ??main_9:
   \   0000C6   3D40....     MOV.W   #`?<Constant "INTERCEPT ">`, R13
   \   0000CA   3C40....     MOV.W   #display_line + 11, R12
   \   0000CE   ........     CALLA   #strcpy
    113                display_changed = HIGH;
   \   0000D2   D243....     MOV.B   #0x1, &display_changed
    114                intercept();
   \   0000D6   ........     CALLA   #intercept
    115                break;
   \   0000DA   503C         JMP     ??main_4
    116              case TURN: 
    117                strcpy(display_line[SECOND_LINE],"  TURNING ");
   \                     ??main_11:
   \   0000DC   3D40....     MOV.W   #`?<Constant "  TURNING ">`, R13
   \   0000E0   3C40....     MOV.W   #display_line + 11, R12
   \   0000E4   ........     CALLA   #strcpy
    118                if(drivePivot(FIRST))state = DRIVE;
   \   0000E8   1C43         MOV.W   #0x1, R12
   \   0000EA   ........     CALLA   #drivePivot
   \   0000EE   0C93         CMP.W   #0x0, R12
   \   0000F0   4524         JEQ     ??main_4
   \   0000F2   F2406400.... MOV.B   #0x64, &state
    119                break;
   \   0000F8   413C         JMP     ??main_4
    120              case DRIVE:
    121                strcpy(display_line[SECOND_LINE],"  CIRCLING ");
   \                     ??main_8:
   \   0000FA   3D40....     MOV.W   #`?<Constant "  CIRCLING ">`, R13
   \   0000FE   3C40....     MOV.W   #display_line + 11, R12
   \   000102   ........     CALLA   #strcpy
    122                display_changed = HIGH;
   \   000106   D243....     MOV.B   #0x1, &display_changed
    123                //time_count_en = HIGH;
    124                followCircle();
   \   00010A   ........     CALLA   #followCircle
    125                break;
   \   00010E   363C         JMP     ??main_4
    126              case TURN2: 
    127                strcpy(display_line[SECOND_LINE],"  TURNING ");
   \                     ??main_12:
   \   000110   3D40....     MOV.W   #`?<Constant "  TURNING ">`, R13
   \   000114   3C40....     MOV.W   #display_line + 11, R12
   \   000118   ........     CALLA   #strcpy
    128                if(drivePivot(FIRST))state = STOP;
   \   00011C   1C43         MOV.W   #0x1, R12
   \   00011E   ........     CALLA   #drivePivot
   \   000122   0C93         CMP.W   #0x0, R12
   \   000124   2B24         JEQ     ??main_4
   \   000126   F2407300.... MOV.B   #0x73, &state
    129                break;
   \   00012C   273C         JMP     ??main_4
    130              case STOP:
    131                strcpy(display_line[SECOND_LINE],"  STOP   ");
   \                     ??main_10:
   \   00012E   3D40....     MOV.W   #`?<Constant "  STOP   ">`, R13
   \   000132   3C40....     MOV.W   #display_line + 11, R12
   \   000136   ........     CALLA   #strcpy
    132                display_changed = HIGH;
   \   00013A   D243....     MOV.B   #0x1, &display_changed
    133                time_count_en = LOW;
   \   00013E   8243....     MOV.W   #0x0, &time_count_en
    134                driveForward(CRUISE,CRUISE);
   \   000142   3D403075     MOV.W   #0x7530, R13
   \   000146   3C403075     MOV.W   #0x7530, R12
   \   00014A   ........     CALLA   #driveForward
    135                waitTime = TWOSECS;
   \   00014E   B2402800.... MOV.W   #0x28, &waitTime
    136                TB0CCTL2 &=~ CCIFG;
   \   000154   92C38603     BIC.W   #0x1, &0x386
    137                TB0CCTL2 |= CCIE;
   \   000158   B2D010008603 BIS.W   #0x10, &0x386
    138                if(endWait){
   \   00015E   8293....     CMP.W   #0x0, &endWait
   \   000162   0C24         JEQ     ??main_4
    139                    TB0CCTL2 &= ~CCIE;
   \   000164   B2C010008603 BIC.W   #0x10, &0x386
    140                    state = INTERCEPT;
   \   00016A   F2406900.... MOV.B   #0x69, &state
    141                    endWait = RESET;
   \   000170   8243....     MOV.W   #0x0, &endWait
    142                    capture = LOW;
   \   000174   8243....     MOV.W   #0x0, &capture
    143                    All_Wheel_Off();
   \   000178   ........     CALLA   #All_Wheel_Off
    144                }
    145                break;
    146              default: break;
    147              }
    148          
    149              /*displayADC();
    150              followCircle();*/
    151              display_changed = HIGH;
   \                     ??main_4:
   \   00017C   D243....     MOV.B   #0x1, &display_changed
    152              Display_Process();
   \   000180   ........     CALLA   #Display_Process
   \   000184   6C3F         JMP     ??main_0
   \   000186   0343         NOP
   \   000188                REQUIRE _A_PM5CTL0_L
   \   000188                REQUIRE _A_PCOUT_L
   \   000188                REQUIRE _A_TB0CCTL2_L
    153            }
    154          //------------------------------------------------------------------------------
    155          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "          ">`:
   \   000000   202020202020 DC8 "          "
   \            2020202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "CALIBRATE ">`:
   \   000000   43414C494252 DC8 "CALIBRATE "
   \            4154452000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "INTERCEPT ">`:
   \   000000   494E54455243 DC8 "INTERCEPT "
   \            4550542000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  TURNING ">`:
   \   000000   20205455524E DC8 "  TURNING "
   \            494E472000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  CIRCLING ">`:
   \   000000   202043495243 DC8 "  CIRCLING "
   \            4C494E472000

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "  STOP   ">`:
   \   000000   202053544F50 DC8 "  STOP   "
   \            20202000    
    156          
    157          
    158          
    159          
    160          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> All_Wheel_Off
        4   -> Begin_ADC
        4   -> Display_Process
        4   -> Display_Update
        4   -> Init_ADC
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> calibrate
        4   -> driveForward
        4   -> drivePivot
        4   -> followCircle
        4   -> intercept
        4   -> strcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      11  ?<Constant "          ">
      12  ?<Constant "  CIRCLING ">
      10  ?<Constant "  STOP   ">
      11  ?<Constant "  TURNING ">
      11  ?<Constant "CALIBRATE ">
      11  ?<Constant "INTERCEPT ">
       2  Last_Time_Sequence
       2  _A_PCOUT_L
       2  _A_PM5CTL0_L
       2  _A_TB0CCTL2_L
       2  capture
       1  change
       1  chosen_direction
       2  cycle_time
       1  display_mode
     392  main
       1  slow_input_down
       2  switchONE
       2  switchTWO
       2  testTurn
       2  test_value
       2  time_change
       2  time_change2

 
 392 bytes in segment CODE
   6 bytes in segment DATA16_AN
  66 bytes in segment DATA16_C
  22 bytes in segment DATA16_Z
 
 392 bytes of CODE  memory
  66 bytes of CONST memory
  22 bytes of DATA  memory (+ 6 bytes shared)

Errors: none
Warnings: none
