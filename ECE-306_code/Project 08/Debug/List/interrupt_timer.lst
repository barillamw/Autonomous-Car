###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           01/Apr/2019  15:35:01
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        08\interrupt_timer.c
#    Command line  =  
#        -f C:\Users\Michael\AppData\Local\Temp\EW221B.tmp
#        ("C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        08\interrupt_timer.c" -lC "C:\Users\Michael\Documents\2019\ECE
#        306\ECE-306_code\Project 08\Debug\List" -o
#        "C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        08\Debug\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR2355__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        08\Debug\List\interrupt_timer.lst
#    Object file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        08\Debug\Obj\interrupt_timer.r43
#
###############################################################################

C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project 08\interrupt_timer.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Michael Barilla
      4          //  Feb 2019
      5          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      6          //
      7          //   Description: This file contains the interrupt functions for the B0-0  
      8          //     and B0-1,2, overflow timers
      9          //
     10          //------------------------------------------------------------------------------
     11          
     12          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x21a
   \   union <unnamed> _A_PAIE_L
   \                     _A_PAIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x21c
   \   union <unnamed> _A_PAIFG_L
   \                     _A_PAIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23c
   \   union <unnamed> _A_PBIFG_L
   \                     _A_PBIFG_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x384
   \   union <unnamed> _A_TB0CCTL1_L
   \                     _A_TB0CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x386
   \   union <unnamed> _A_TB0CCTL2_L
   \                     _A_TB0CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x394
   \   union <unnamed> _A_TB0CCR1_L
   \                     _A_TB0CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x396
   \   union <unnamed> _A_TB0CCR2_L
   \                     _A_TB0CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3ae
   \   union <unnamed> _A_TB0IV_L
   \                     _A_TB0IV_L:
   \   000000                DS8 2
     13          #include  "macros.h"
     14          #include  "functions.h"
     15          
     16          
     17          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          volatile unsigned int Time_Sequence;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     20          unsigned int blink_count;
   \                     blink_count:
   \   000000                DS8 2
     21          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          volatile unsigned int debounce1;
   \                     debounce1:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          volatile unsigned int debounce1_count;
   \                     debounce1_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          volatile unsigned int debounce2;
   \                     debounce2:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          volatile unsigned int debounce2_count;
   \                     debounce2_count:
   \   000000                DS8 2
     26          
     27          extern volatile unsigned char update_display;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     28          unsigned int update_count;
   \                     update_count:
   \   000000                DS8 2
     29          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          volatile unsigned int newDrive;
   \                     newDrive:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     31          unsigned int newDrive_count;
   \                     newDrive_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     32          unsigned int newSecond;
   \                     newSecond:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     33          unsigned int second_count;
   \                     second_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     34          unsigned int time_count;
   \                     time_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     35          unsigned int time_count_en;
   \                     time_count_en:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     36          unsigned int wait_count;
   \                     wait_count:
   \   000000                DS8 2
     37          extern unsigned int endWait;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     38          unsigned int sample;
   \                     sample:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     39          unsigned int waitTime;
   \                     waitTime:
   \   000000                DS8 2
     40          
     41          
     42          
     43          #pragma vector = TIMER0_B0_VECTOR // Timer B0 – 0 Capture compare

   \                                 In  segment ISR_CODE, align 2
     44          __interrupt void Timer0_B0_ISR(void){
   \                     Timer0_B0_ISR:
   \   000000   3F15         PUSHM.W #0x4, R15
     45          //--------------------------------------------------------------------
     46          // TimerB0 0 Interrupt handler
     47          //--------------------------------------------------------------------
     48            /*// LCD Backlight
     49            if(blink_count++ > COUNT_TEN){
     50              blink_count = RESET_STATE; // Reset for next count
     51              P6OUT ^= LCD_BACKLITE; // Flip State of LCD_BACKLITE
     52            }*/
     53            
     54            
     55            if(update_count++ >COUNT_FOUR){
   \   000002   1F42....     MOV.W   &update_count, R15
   \   000006   0E4F         MOV.W   R15, R14
   \   000008   1E53         ADD.W   #0x1, R14
   \   00000A   824E....     MOV.W   R14, &update_count
   \   00000E   3F900500     CMP.W   #0x5, R15
   \   000012   1228         JNC     ??Timer0_B0_ISR_1
     56                  update_count = LOW;
   \   000014   8243....     MOV.W   #0x0, &update_count
     57                  update_display = HIGH;
   \   000018   D243....     MOV.B   #0x1, &update_display
     58                  if(time_count_en){
   \   00001C   8293....     CMP.W   #0x0, &time_count_en
   \   000020   0B24         JEQ     ??Timer0_B0_ISR_1
     59                    if(time_count >= MAXTIME) time_count = RESET;
   \   000022   B2900E27.... CMP.W   #0x270e, &time_count
   \   000028   0328         JNC     ??Timer0_B0_ISR_2
   \   00002A   8243....     MOV.W   #0x0, &time_count
   \   00002E   023C         JMP     ??Timer0_B0_ISR_0
     60                      else time_count += SECOND;
   \                     ??Timer0_B0_ISR_2:
   \   000030   A253....     ADD.W   #0x2, &time_count
     61                    time_display();
   \                     ??Timer0_B0_ISR_0:
   \   000034   ........     CALLA   #time_display
     62                  }
     63            }
     64            
     65            if (second_count++ > COUNT_TWENTY){
   \                     ??Timer0_B0_ISR_1:
   \   000038   1F42....     MOV.W   &second_count, R15
   \   00003C   0E4F         MOV.W   R15, R14
   \   00003E   1E53         ADD.W   #0x1, R14
   \   000040   824E....     MOV.W   R14, &second_count
   \   000044   3F901500     CMP.W   #0x15, R15
   \   000048   0628         JNC     ??Timer0_B0_ISR_3
     66              second_count = LOW;
   \   00004A   8243....     MOV.W   #0x0, &second_count
     67              newSecond = HIGH;
   \   00004E   9243....     MOV.W   #0x1, &newSecond
     68              sample = HIGH;
   \   000052   9243....     MOV.W   #0x1, &sample
     69            }
     70              
     71            // Time Sequence
     72            one_time = HIGH;
   \                     ??Timer0_B0_ISR_3:
   \   000056   D243....     MOV.B   #0x1, &one_time
     73            if(Time_Sequence++ > TIME_MAX_250){
   \   00005A   1F42....     MOV.W   &Time_Sequence, R15
   \   00005E   0E4F         MOV.W   R15, R14
   \   000060   1E53         ADD.W   #0x1, R14
   \   000062   824E....     MOV.W   R14, &Time_Sequence
   \   000066   3F90FB00     CMP.W   #0xfb, R15
   \   00006A   0228         JNC     ??Timer0_B0_ISR_4
     74              Time_Sequence = RESET_STATE;
   \   00006C   8243....     MOV.W   #0x0, &Time_Sequence
     75            }
     76          
     77            
     78           
     79            
     80            //CHANGE_PROBE;
     81            TB0CCR0 += TB0CCR0_INTERVAL; // Add interval Offset to TBCCR0
   \                     ??Timer0_B0_ISR_4:
   \   000070   B250A8619203 ADD.W   #0x61a8, &0x392
     82          //--------------------------------------------------------------------
     83          }
   \   000076   3C17         POPM.W  #0x4, R15
   \   000078   0013         RETI
   \   00007A                REQUIRE _A_TB0CCR0_L
     84          
     85          #pragma vector = TIMER0_B1_VECTOR // Timer B0 – 1 Capture compare

   \                                 In  segment ISR_CODE, align 2
     86          __interrupt void Timer0_B1_ISR(void){
   \                     Timer0_B1_ISR:
   \   000000   1F15         PUSHM.W #0x2, R15
     87          //--------------------------------------------------------------------
     88          // TimerB0 1 Interrupt handler
     89          //--------------------------------------------------------------------
     90            switch(__even_in_range(TB0IV,S14)){
   \   000002   1F42AE03     MOV.W   &0x3ae, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for Timer0_B1_ISR>_0`:
   \   000008   5A3C         JMP     ??Timer0_B1_ISR_1
   \   00000A   063C         JMP     ??Timer0_B1_ISR_6
   \   00000C   393C         JMP     ??Timer0_B1_ISR_7
   \   00000E   573C         JMP     ??Timer0_B1_ISR_1
   \   000010   563C         JMP     ??Timer0_B1_ISR_1
   \   000012   553C         JMP     ??Timer0_B1_ISR_1
   \   000014   543C         JMP     ??Timer0_B1_ISR_1
   \   000016   533C         JMP     ??Timer0_B1_ISR_1
     91            case S0: break;                //No Interrupt
     92            case S2:                       //CCR1 
     93              if (debounce1){
   \                     ??Timer0_B1_ISR_6:
   \   000018   8293....     CMP.W   #0x0, &debounce1
   \   00001C   1424         JEQ     ??Timer0_B1_ISR_2
     94                if(debounce1_count++ > COUNT_TEN){
   \   00001E   1F42....     MOV.W   &debounce1_count, R15
   \   000022   0E4F         MOV.W   R15, R14
   \   000024   1E53         ADD.W   #0x1, R14
   \   000026   824E....     MOV.W   R14, &debounce1_count
   \   00002A   3F900B00     CMP.W   #0xb, R15
   \   00002E   0B28         JNC     ??Timer0_B1_ISR_2
     95                  debounce1 = LOW;
   \   000030   8243....     MOV.W   #0x0, &debounce1
     96                  debounce1_count = LOW;
   \   000034   8243....     MOV.W   #0x0, &debounce1_count
     97                  P4IFG &= ~SW1;                //Clear all Sw1 inerrupt flags
   \   000038   E2C33D02     BIC.B   #0x2, &0x23d
     98                  P4IE |= SW1;                  //Sw1 interrupt enabled
   \   00003C   E2D33B02     BIS.B   #0x2, &0x23b
     99                  TB0CCTL1 &= ~CCIE;            // CCR1 disable interrupt
   \   000040   B2C010008403 BIC.W   #0x10, &0x384
    100                }
    101              }
    102              if(debounce2){
   \                     ??Timer0_B1_ISR_2:
   \   000046   8293....     CMP.W   #0x0, &debounce2
   \   00004A   1424         JEQ     ??Timer0_B1_ISR_3
    103                if(debounce2_count++ > COUNT_TEN){
   \   00004C   1F42....     MOV.W   &debounce2_count, R15
   \   000050   0E4F         MOV.W   R15, R14
   \   000052   1E53         ADD.W   #0x1, R14
   \   000054   824E....     MOV.W   R14, &debounce2_count
   \   000058   3F900B00     CMP.W   #0xb, R15
   \   00005C   0B28         JNC     ??Timer0_B1_ISR_3
    104                  debounce2 = LOW;
   \   00005E   8243....     MOV.W   #0x0, &debounce2
    105                  debounce2_count = LOW;
   \   000062   8243....     MOV.W   #0x0, &debounce2_count
    106                  P2IFG &= ~SW2;                //Clear all Sw1 inerrupt flags
   \   000066   F2C21D02     BIC.B   #0x8, &0x21d
    107                  P2IE |= SW2;                  //Sw1 interrupt enabled
   \   00006A   F2D21B02     BIS.B   #0x8, &0x21b
    108                  TB0CCTL1 &= ~CCIE;            // CCR1 disable interrupt
   \   00006E   B2C010008403 BIC.W   #0x10, &0x384
    109                }
    110              }
    111              TB0CCTL1 &= ~CCIFG;               // CCR1 clear interrupt flag
   \                     ??Timer0_B1_ISR_3:
   \   000074   92C38403     BIC.W   #0x1, &0x384
    112              TB0CCR1 += TB0CCR1_INTERVAL;      // Add interval Offset to TBCCR1
   \   000078   B250409C9403 ADD.W   #0x9c40, &0x394
    113              break;
   \   00007E   1F3C         JMP     ??Timer0_B1_ISR_1
    114            case S4:
    115             if (wait_count++ > waitTime){
   \                     ??Timer0_B1_ISR_7:
   \   000080   1F42....     MOV.W   &wait_count, R15
   \   000084   0E4F         MOV.W   R15, R14
   \   000086   1E53         ADD.W   #0x1, R14
   \   000088   824E....     MOV.W   R14, &wait_count
   \   00008C   829F....     CMP.W   R15, &waitTime
   \   000090   042C         JC      ??Timer0_B1_ISR_4
    116              wait_count = LOW;
   \   000092   8243....     MOV.W   #0x0, &wait_count
    117              endWait = HIGH;
   \   000096   9243....     MOV.W   #0x1, &endWait
    118             }
    119             if (newDrive_count++ > COUNT_FOUR){
   \                     ??Timer0_B1_ISR_4:
   \   00009A   1F42....     MOV.W   &newDrive_count, R15
   \   00009E   0E4F         MOV.W   R15, R14
   \   0000A0   1E53         ADD.W   #0x1, R14
   \   0000A2   824E....     MOV.W   R14, &newDrive_count
   \   0000A6   3F900500     CMP.W   #0x5, R15
   \   0000AA   0428         JNC     ??Timer0_B1_ISR_5
    120              newDrive_count = LOW;
   \   0000AC   8243....     MOV.W   #0x0, &newDrive_count
    121              newDrive = HIGH;
   \   0000B0   9243....     MOV.W   #0x1, &newDrive
    122             }
    123             
    124              TB0CCTL2 &= ~CCIFG; 
   \                     ??Timer0_B1_ISR_5:
   \   0000B4   92C38603     BIC.W   #0x1, &0x386
    125              TB0CCR2 += TB0CCR2_INTERVAL;
   \   0000B8   B250A8619603 ADD.W   #0x61a8, &0x396
    126            case S14: break;
    127            default: break;
    128            }
    129          //--------------------------------------------------------------------
    130          }
   \                     ??Timer0_B1_ISR_1:
   \   0000BE   1E17         POPM.W  #0x2, R15
   \   0000C0   0013         RETI
   \   0000C2                REQUIRE _A_PBIFG_L
   \   0000C2                REQUIRE _A_PBIE_L
   \   0000C2                REQUIRE _A_TB0CCTL1_L
   \   0000C2                REQUIRE _A_PAIFG_L
   \   0000C2                REQUIRE _A_PAIE_L
   \   0000C2                REQUIRE _A_TB0CCR1_L
   \   0000C2                REQUIRE _A_TB0CCTL2_L
   \   0000C2                REQUIRE _A_TB0CCR2_L
   \   0000C2                REQUIRE _A_TB0IV_L

   \                                 In  segment INTVEC, offset 0x54, root
   \                     `??Timer0_B1_ISR::??INTVEC 84`:
   \   000054   ....         DC16    Timer0_B1_ISR

   \                                 In  segment INTVEC, offset 0x56, root
   \                     `??Timer0_B0_ISR::??INTVEC 86`:
   \   000056   ....         DC16    Timer0_B0_ISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   Timer0_B0_ISR
       12   -> time_display
      8   Timer0_B1_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  Time_Sequence
     122  Timer0_B0_ISR
       2  Timer0_B0_ISR::??INTVEC 86
     194  Timer0_B1_ISR
       2  Timer0_B1_ISR::??INTVEC 84
       2  _A_PAIE_L
       2  _A_PAIFG_L
       2  _A_PBIE_L
       2  _A_PBIFG_L
       2  _A_TB0CCR0_L
       2  _A_TB0CCR1_L
       2  _A_TB0CCR2_L
       2  _A_TB0CCTL1_L
       2  _A_TB0CCTL2_L
       2  _A_TB0IV_L
       2  blink_count
       2  debounce1
       2  debounce1_count
       2  debounce2
       2  debounce2_count
       2  newDrive
       2  newDrive_count
       2  newSecond
       1  one_time
       2  sample
       2  second_count
       2  time_count
       2  time_count_en
       2  update_count
       2  waitTime
       2  wait_count

 
  20 bytes in segment DATA16_AN
  33 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
 316 bytes in segment ISR_CODE
 
 316 bytes of CODE  memory
   0 bytes of CONST memory (+  4 bytes shared)
  33 bytes of DATA  memory (+ 20 bytes shared)

Errors: none
Warnings: none
