###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           25/Apr/2019  15:00:54
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        10.1\interrupt_ADC.c
#    Command line  =  
#        -f C:\Users\Michael\AppData\Local\Temp\EWBB63.tmp
#        ("C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        10.1\interrupt_ADC.c" -lC "C:\Users\Michael\Documents\2019\ECE
#        306\ECE-306_code\Project 10.1\Debug\List" -o
#        "C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        10.1\Debug\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR2355__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        10.1\Debug\List\interrupt_ADC.lst
#    Object file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project
#        10.1\Debug\Obj\interrupt_ADC.r43
#
###############################################################################

C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Project 10.1\interrupt_ADC.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the interrupt function for the ADC 
      4          //  
      5          //
      6          //  Michael Barilla
      7          //  Mar 2019
      8          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
      9          //------------------------------------------------------------------------------
     10          #include  "functions.h"
     11          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADCCTL0_L
   \                     _A_ADCCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x70a
   \   union <unnamed> _A_ADCMCTL0_L
   \                     _A_ADCMCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x712
   \   union <unnamed> _A_ADCMEM0_L
   \                     _A_ADCMEM0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x71e
   \   union <unnamed> _A_ADCIV_L
   \                     _A_ADCIV_L:
   \   000000                DS8 2
     12          #include "macros.h"
     13          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     14          unsigned int channel;
   \                     channel:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     15          unsigned int V_Detect_R[MAX_ARRAY];
   \                     V_Detect_R:
   \   000000                DS8 16

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     16          unsigned int V_Detect_L[MAX_ARRAY];
   \                     V_Detect_L:
   \   000000                DS8 16

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     17          unsigned int R_count;
   \                     R_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     18          unsigned int L_count;
   \                     L_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     19          unsigned int ADC_Thumb;
   \                     ADC_Thumb:
   \   000000                DS8 2
     20          
     21          
     22          #pragma vector=ADC_VECTOR

   \                                 In  segment ISR_CODE, align 2
     23          __interrupt void ADC_ISR(void){
   \                     ADC_ISR:
   \   000000   3F15         PUSHM.W #0x4, R15
     24            int valL;
     25            int valR;
     26            
     27            switch(__even_in_range(ADCIV,ADCIV_ADCIFG)){
   \   000002   1D421E07     MOV.W   &0x71e, R13
   \   000006   E00D         ADDA    R13, PC
   \                     `?<Jumptable for ADC_ISR>_0`:
   \   000008   463C         JMP     ??ADC_ISR_1
   \   00000A   453C         JMP     ??ADC_ISR_1
   \   00000C   443C         JMP     ??ADC_ISR_1
   \   00000E   433C         JMP     ??ADC_ISR_1
   \   000010   423C         JMP     ??ADC_ISR_1
   \   000012   413C         JMP     ??ADC_ISR_1
   \   000014   003C         JMP     ??ADC_ISR_5
     28              case ADCIV_NONE:
     29                break;
     30              case ADCIV_ADCOVIFG:        //When a conversion result is written to the ADCMEM0
     31                                          // before its previosu conversion result was read.
     32                break;
     33              case ADCIV_ADCTOVIFG:       //ADC conversion-time overflow
     34                break;
     35              case ADCIV_ADCHIIFG:        //Window comparator interrupt flags
     36                break;
     37              case ADCIV_ADCLOIFG:        //Window comparator interrupt flag
     38                break;
     39              case ADCIV_ADCINIFG:        //Window comparator interrupt flag
     40                break;
     41              case ADCIV_ADCIFG:          //ADCMEM0 memory register with the convesion result
     42                ADCCTL0 &= ~ADCENC;
   \                     ??ADC_ISR_5:
   \   000016   A2C30007     BIC.W   #0x2, &0x700
     43                switch(channel){
   \   00001A   1D42....     MOV.W   &channel, R13
   \   00001E   0D83         SUB.W   #0x0, R13
   \   000020   0524         JEQ     ??ADC_ISR_2
   \   000022   1D83         SUB.W   #0x1, R13
   \   000024   0E24         JEQ     ??ADC_ISR_3
   \   000026   1D83         SUB.W   #0x1, R13
   \   000028   1F24         JEQ     ??ADC_ISR_4
   \   00002A   313C         JMP     ??ADC_ISR_0
     44                  case THUMB:
     45                    ADC_Thumb = ADCMEM0;          //Capture Thumb ADC Value
   \                     ??ADC_ISR_2:
   \   00002C   92421207.... MOV.W   &0x712, &ADC_Thumb
     46                    ADCMCTL0 &= ~ADCINCH_5;        //Set In Channel from 5 to 2
   \   000032   B2F0FAFF0A07 AND.W   #0xfffa, &0x70a
     47                    ADCMCTL0 |= ADCINCH_2;
   \   000038   A2D30A07     BIS.W   #0x2, &0x70a
     48                    channel = LDET;
   \   00003C   9243....     MOV.W   #0x1, &channel
     49                    break;
   \   000040   263C         JMP     ??ADC_ISR_0
     50                  case LDET:
     51                    valL = ADCMEM0;
   \                     ??ADC_ISR_3:
   \   000042   1F421207     MOV.W   &0x712, R15
     52                    V_Detect_L[L_count++%MAX_ARRAY] = valL;         //Capture VDETL ADC Value
   \   000046   1D42....     MOV.W   &L_count, R13
   \   00004A   3DF00700     AND.W   #0x7, R13
   \   00004E   0D5D         RLA.W   R13
   \   000050   8D4F....     MOV.W   R15, V_Detect_L(R13)
   \   000054   9253....     ADD.W   #0x1, &L_count
     53                    ADCMCTL0 &= ~ADCINCH_2;        //Set In Channel from 2 to 3
   \   000058   A2C30A07     BIC.W   #0x2, &0x70a
     54                    ADCMCTL0 |= ADCINCH_3;
   \   00005C   B2D003000A07 BIS.W   #0x3, &0x70a
     55                    channel = RDET;
   \   000062   A243....     MOV.W   #0x2, &channel
     56                    break;
   \   000066   133C         JMP     ??ADC_ISR_0
     57                  case RDET:
     58                    valR = ADCMEM0;
   \                     ??ADC_ISR_4:
   \   000068   1E421207     MOV.W   &0x712, R14
     59                    V_Detect_R[R_count++%MAX_ARRAY] = valR;         //Capture VDETR ADC Value
   \   00006C   1D42....     MOV.W   &R_count, R13
   \   000070   3DF00700     AND.W   #0x7, R13
   \   000074   0D5D         RLA.W   R13
   \   000076   8D4E....     MOV.W   R14, V_Detect_R(R13)
   \   00007A   9253....     ADD.W   #0x1, &R_count
     60                    ADCMCTL0 &= ~ADCINCH_3;        //Set In Channel from 3 to 5
   \   00007E   B2F0FCFF0A07 AND.W   #0xfffc, &0x70a
     61                    ADCMCTL0 |= ADCINCH_5;
   \   000084   B2D005000A07 BIS.W   #0x5, &0x70a
     62                    channel = THUMB;              //Reset Channel
   \   00008A   8243....     MOV.W   #0x0, &channel
     63                    break;
     64                  default:
     65                    break; 
     66                }
     67                ADCCTL0 |= ADCENC;
   \                     ??ADC_ISR_0:
   \   00008E   A2D30007     BIS.W   #0x2, &0x700
     68                ADCCTL0 |= ADCSC;
   \   000092   92D30007     BIS.W   #0x1, &0x700
     69                
     70                break;
     71              default:
     72                break;
     73            }
     74          }
   \                     ??ADC_ISR_1:
   \   000096   3C17         POPM.W  #0x4, R15
   \   000098   0013         RETI
   \   00009A                REQUIRE _A_ADCCTL0_L
   \   00009A                REQUIRE _A_ADCMEM0_L
   \   00009A                REQUIRE _A_ADCMCTL0_L
   \   00009A                REQUIRE _A_ADCIV_L

   \                                 In  segment INTVEC, offset 0x3a, root
   \                     `??ADC_ISR::??INTVEC 58`:
   \   00003A   ....         DC16    ADC_ISR

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
     12   ADC_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     154  ADC_ISR
       2  ADC_ISR::??INTVEC 58
       2  ADC_Thumb
       2  L_count
       2  R_count
      16  V_Detect_L
      16  V_Detect_R
       2  _A_ADCCTL0_L
       2  _A_ADCIV_L
       2  _A_ADCMCTL0_L
       2  _A_ADCMEM0_L
       2  channel

 
   8 bytes in segment DATA16_AN
  40 bytes in segment DATA16_Z
   2 bytes in segment INTVEC
 154 bytes in segment ISR_CODE
 
 154 bytes of CODE  memory
   0 bytes of CONST memory (+ 2 bytes shared)
  40 bytes of DATA  memory (+ 8 bytes shared)

Errors: none
Warnings: none
