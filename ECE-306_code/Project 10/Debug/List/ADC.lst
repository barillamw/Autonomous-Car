###############################################################################
#
# IAR C/C++ Compiler V7.12.1.987/W32 for MSP430           10/Apr/2019  23:59:34
# Copyright 1996-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for Texas Instruments MSP430, 8K KickStart Edition 7.12
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework 09 -
#        copy\ADC.c
#    Command line  =  
#        -f C:\Users\Michael\AppData\Local\Temp\EW957.tmp
#        ("C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework 09 -
#        copy\ADC.c" -lC "C:\Users\Michael\Documents\2019\ECE
#        306\ECE-306_code\Homework 09 - copy\Debug\List" -o
#        "C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework 09 -
#        copy\Debug\Obj" --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --debug -D__MSP430FR2355__ -e --double=32 --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\430\lib\dlib\dl430xlsfn.h" -I ./\ --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework 09 -
#        copy\Debug\List\ADC.lst
#    Object file   =  
#        C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework 09 -
#        copy\Debug\Obj\ADC.r43
#
###############################################################################

C:\Users\Michael\Documents\2019\ECE 306\ECE-306_code\Homework 09 - copy\ADC.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the functions to initiate the ADC Registers 
      4          //  to set pins 2, 3, and 5 to measure the V_Detect_L, V_Detece_R, and V_Thumb 
      5          //  respectively.
      6          //  
      7          //
      8          //  Michael Barilla
      9          //  Mar 2019
     10          //  Built with IAR Embedded Workbench Version: V4.10A/W32 (7.11.2)
     11          //------------------------------------------------------------------------------
     12          #include  "functions.h"
     13          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADCCTL0_L
   \                     _A_ADCCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x702
   \   union <unnamed> _A_ADCCTL1_L
   \                     _A_ADCCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x704
   \   union <unnamed> _A_ADCCTL2_L
   \                     _A_ADCCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x70a
   \   union <unnamed> _A_ADCMCTL0_L
   \                     _A_ADCMCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x71a
   \   union <unnamed> _A_ADCIE_L
   \                     _A_ADCIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2
     14          #include "macros.h"
     15          #include <string.h>
     16          
     17          extern volatile unsigned char display_changed;
     18          extern char display_line[FOURTH][COUNT_ELEVEN];
     19          
     20          
     21          

   \                                 In  segment CODE, align 2
     22          void Init_ADC(void){
   \                     Init_ADC:
     23            //----------------------------------------------------------------------------
     24            //    V_DETECT_L       (0x04) // Pin 2 A2
     25            //    V_DETECT_R       (0x08) // Pin 3 A3
     26            //    V_THUMB          (0x20) // Pin 5 A5
     27            //----------------------------------------------------------------------------
     28            
     29            //ADCCTL0 Register
     30              ADCCTL0  = RESET;     //Reset
   \   000000   82430007     MOV.W   #0x0, &0x700
     31              ADCCTL0 |= ADCSHT_2;        //16 ADC clocks
   \   000004   B2D000020007 BIS.W   #0x200, &0x700
     32              ADCCTL0 |= ADCMSC;          //MSC
   \   00000A   B2D080000007 BIS.W   #0x80, &0x700
     33              ADCCTL0 |= ADCON;           //ADC ON
   \   000010   B2D010000007 BIS.W   #0x10, &0x700
     34              
     35            //ADCCTL1 Register
     36              ADCCTL1  = RESET;     //Reset
   \   000016   82430207     MOV.W   #0x0, &0x702
     37              ADCCTL1 |= ADCSHS_0;        //00b = ADCSC bit
   \   00001A   924202070207 MOV.W   &0x702, &0x702
     38              ADCCTL1 |= ADCSHP;          //ADC sample-and-hold SAMPCON signal from sampling timer.
   \   000020   B2D000020207 BIS.W   #0x200, &0x702
     39              ADCCTL1 &= ~ADCISSH;        //ADC invert signal sample - and - hold.
   \   000026   B2C000010207 BIC.W   #0x100, &0x702
     40              ADCCTL1 |= ADCDIV_0;        //ADC clock divider -000b = Divide by 1
   \   00002C   924202070207 MOV.W   &0x702, &0x702
     41              ADCCTL1 |= ADCSSEL_0;       //ADC clock MODCLK
   \   000032   924202070207 MOV.W   &0x702, &0x702
     42              ADCCTL1 |= ADCCONSEQ_0;     //ADC conversion sequence 00b = Single -channel single channel single -conversionconversion conversion
   \   000038   924202070207 MOV.W   &0x702, &0x702
     43            //ADCCTL1 & ADCBUSY identifies a conversion is in process 
     44            
     45            //ADCCTL2 Register 
     46              ADCCTL2 = RESET;      //Reset
   \   00003E   82430407     MOV.W   #0x0, &0x704
     47              ADCCTL2 |= ADCPDIV0;        //00b = Pre -divide by 1divide by 1 divide by 1 divide by 1
   \   000042   B2D000010407 BIS.W   #0x100, &0x704
     48              ADCCTL2 |= ADCRES_2;        //ADC resolution 10b = 12 bit (14 clock cycle conversion time)
   \   000048   B2D020000407 BIS.W   #0x20, &0x704
     49              ADCCTL2 &= ~ADCDF;          //ADC data read-back format 0b = Binary unsigned. back format 0b = Binary unsigned.
   \   00004E   B2C20407     BIC.W   #0x8, &0x704
     50              ADCCTL2 &= ~ADCSR;          //ADC sampling rate 0b = buffer supports up to 200 ksps
   \   000052   A2C20407     BIC.W   #0x4, &0x704
     51              
     52            //ADCMCTL0 Register           
     53              ADCMCTL0 |= ADCSREF_0;      //VREF - 000b = {VR+ = AVCC and VR- = AVSS}
   \   000056   92420A070A07 MOV.W   &0x70a, &0x70a
     54              ADCMCTL0 |= ADCINCH_5;      //V_THUMB (0x20) Pin 5 A5
   \   00005C   B2D005000A07 BIS.W   #0x5, &0x70a
     55              
     56              ADCIE &= ~ADCIE0;            // disable ADC conv complete interrupt 
   \   000062   92C31A07     BIC.W   #0x1, &0x71a
     57              ADCCTL0 &= ~ADCENC;          // ADC enable conversion. 
   \   000066   A2C30007     BIC.W   #0x2, &0x700
     58              ADCCTL0 &= ~ADCSC;           // ADC start conversion. 
   \   00006A   92C30007     BIC.W   #0x1, &0x700
     59          }
   \   00006E   1001         RETA
   \   000070                REQUIRE _A_ADCCTL0_L
   \   000070                REQUIRE _A_ADCCTL1_L
   \   000070                REQUIRE _A_ADCCTL2_L
   \   000070                REQUIRE _A_ADCMCTL0_L
   \   000070                REQUIRE _A_ADCIE_L
     60          

   \                                 In  segment CODE, align 2
     61          void Begin_ADC(void){
   \                     Begin_ADC:
     62            IR_LED_ON;                    //Turn on IR LED
   \   000000   F2D010004202 BIS.B   #0x10, &0x242
     63            //strcpy(display_line[FIRST_LINE], " ADC ON  ");
     64            display_changed = HIGH;       //Change Display
   \   000006   D243....     MOV.B   #0x1, &display_changed
     65            ADCIE |= ADCIE0;              //enable ADC conv complete interrupt
   \   00000A   92D31A07     BIS.W   #0x1, &0x71a
     66            ADCCTL0 |= ADCENC;            //ADC enable conversion
   \   00000E   A2D30007     BIS.W   #0x2, &0x700
     67            ADCCTL0 |= ADCSC;             //ADC start conversion.
   \   000012   92D30007     BIS.W   #0x1, &0x700
     68          }
   \   000016   1001         RETA
   \   000018                REQUIRE _A_PCOUT_L
   \   000018                REQUIRE _A_ADCIE_L
   \   000018                REQUIRE _A_ADCCTL0_L
     69          

   \                                 In  segment CODE, align 2
     70          void End_ADC(void){
   \                     End_ADC:
     71            IR_LED_OFF;                   //Turn Off IR LED
   \   000000   F2C010004202 BIC.B   #0x10, &0x242
     72            //strcpy(display_line[FIRST_LINE], "  ADC OFF  ");
     73            display_changed = HIGH;       //Change Display
   \   000006   D243....     MOV.B   #0x1, &display_changed
     74            ADCIE &= ~ADCIE0;             //disable ADC conv complete interrupt
   \   00000A   92C31A07     BIC.W   #0x1, &0x71a
     75            ADCCTL0 &= ~ADCENC;           //ADC enable conversion
   \   00000E   A2C30007     BIC.W   #0x2, &0x700
     76            ADCCTL0 &= ~ADCSC;            //ADC Start conversion.
   \   000012   92C30007     BIC.W   #0x1, &0x700
     77          }
   \   000016   1001         RETA
   \   000018                REQUIRE _A_PCOUT_L
   \   000018                REQUIRE _A_ADCIE_L
   \   000018                REQUIRE _A_ADCCTL0_L
     78          
     79          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Begin_ADC
      4   End_ADC
      4   Init_ADC


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      24  Begin_ADC
      24  End_ADC
     112  Init_ADC
       2  _A_ADCCTL0_L
       2  _A_ADCCTL1_L
       2  _A_ADCCTL2_L
       2  _A_ADCIE_L
       2  _A_ADCMCTL0_L
       2  _A_PCOUT_L

 
 160 bytes in segment CODE
  12 bytes in segment DATA16_AN
 
 160 bytes of CODE memory
   0 bytes of DATA memory (+ 12 bytes shared)

Errors: none
Warnings: none
